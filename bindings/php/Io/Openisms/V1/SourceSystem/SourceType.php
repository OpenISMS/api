<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: io/openisms/api.proto

namespace Io\Openisms\V1\SourceSystem;

use UnexpectedValueException;

/**
 * Protobuf type <code>io.openisms.v1.SourceSystem.SourceType</code>
 */
class SourceType
{
    /**
     * Generated from protobuf enum <code>undefined = 0;</code>
     */
    const undefined = 0;
    /**
     * Infrastructure
     *
     * Generated from protobuf enum <code>identity_provider = 1;</code>
     */
    const identity_provider = 1;
    /**
     * Generated from protobuf enum <code>source_control_management = 2;</code>
     */
    const source_control_management = 2;
    /**
     * AWS, Google Cloud, Azure, Hetzner, OVH
     *
     * Generated from protobuf enum <code>cloud_provider = 3;</code>
     */
    const cloud_provider = 3;
    /**
     * Generated from protobuf enum <code>database = 4;</code>
     */
    const database = 4;
    /**
     * Tailscale, Wireguard, VPN, Cloudflare
     *
     * Generated from protobuf enum <code>network = 5;</code>
     */
    const network = 5;
    /**
     * Devices & Security, connected to laptops
     *
     * Generated from protobuf enum <code>device_management = 10;</code>
     */
    const device_management = 10;
    /**
     * Anti-virus
     *
     * Generated from protobuf enum <code>security_software = 11;</code>
     */
    const security_software = 11;
    /**
     * MFA, 1Password
     *
     * Generated from protobuf enum <code>password_manager = 12;</code>
     */
    const password_manager = 12;
    /**
     * Tools & SaaS
     *
     * Generated from protobuf enum <code>communication = 20;</code>
     */
    const communication = 20;
    /**
     * HR, Personio, BambooHR
     *
     * Generated from protobuf enum <code>human_resources = 21;</code>
     */
    const human_resources = 21;
    /**
     * CMS, Notion, Confluence, WordPress
     *
     * Generated from protobuf enum <code>content_management_system = 22;</code>
     */
    const content_management_system = 22;
    /**
     * Jira, Trello, Asana, Monday.com, airfocus
     *
     * Generated from protobuf enum <code>ticketing = 23;</code>
     */
    const ticketing = 23;
    /**
     * CRM
     *
     * Generated from protobuf enum <code>customer_relationship_management = 24;</code>
     */
    const customer_relationship_management = 24;
    /**
     * Stripe, invoice handling
     *
     * Generated from protobuf enum <code>finance = 25;</code>
     */
    const finance = 25;
    /**
     * Generated from protobuf enum <code>analytics = 26;</code>
     */
    const analytics = 26;

    private static $valueToName = [
        self::undefined => 'undefined',
        self::identity_provider => 'identity_provider',
        self::source_control_management => 'source_control_management',
        self::cloud_provider => 'cloud_provider',
        self::database => 'database',
        self::network => 'network',
        self::device_management => 'device_management',
        self::security_software => 'security_software',
        self::password_manager => 'password_manager',
        self::communication => 'communication',
        self::human_resources => 'human_resources',
        self::content_management_system => 'content_management_system',
        self::ticketing => 'ticketing',
        self::customer_relationship_management => 'customer_relationship_management',
        self::finance => 'finance',
        self::analytics => 'analytics',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(SourceType::class, \Io\Openisms\V1\SourceSystem_SourceType::class);

