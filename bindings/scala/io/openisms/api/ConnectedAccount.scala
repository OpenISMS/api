// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.openisms.api

@SerialVersionUID(0L)
final case class ConnectedAccount(
    appId: _root_.scala.Predef.String = "",
    appName: _root_.scala.Predef.String = "",
    appType: _root_.scala.Predef.String = "",
    appUrl: _root_.scala.Predef.String = "",
    userId: _root_.scala.Predef.String = "",
    scopes: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ConnectedAccount] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = appId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = appName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = appType
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = appUrl
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = userId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      scopes.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = appId
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = appName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = appType
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = appUrl
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = userId
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      scopes.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def withAppId(__v: _root_.scala.Predef.String): ConnectedAccount = copy(appId = __v)
    def withAppName(__v: _root_.scala.Predef.String): ConnectedAccount = copy(appName = __v)
    def withAppType(__v: _root_.scala.Predef.String): ConnectedAccount = copy(appType = __v)
    def withAppUrl(__v: _root_.scala.Predef.String): ConnectedAccount = copy(appUrl = __v)
    def withUserId(__v: _root_.scala.Predef.String): ConnectedAccount = copy(userId = __v)
    def clearScopes = copy(scopes = _root_.scala.Seq.empty)
    def addScopes(__vs: _root_.scala.Predef.String *): ConnectedAccount = addAllScopes(__vs)
    def addAllScopes(__vs: Iterable[_root_.scala.Predef.String]): ConnectedAccount = copy(scopes = scopes ++ __vs)
    def withScopes(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ConnectedAccount = copy(scopes = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = appId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = appName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = appType
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = appUrl
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = userId
          if (__t != "") __t else null
        }
        case 6 => scopes
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(appId)
        case 2 => _root_.scalapb.descriptors.PString(appName)
        case 3 => _root_.scalapb.descriptors.PString(appType)
        case 4 => _root_.scalapb.descriptors.PString(appUrl)
        case 5 => _root_.scalapb.descriptors.PString(userId)
        case 6 => _root_.scalapb.descriptors.PRepeated(scopes.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.openisms.api.ConnectedAccount.type = io.openisms.api.ConnectedAccount
    // @@protoc_insertion_point(GeneratedMessage[io.openisms.v1.ConnectedAccount])
}

object ConnectedAccount extends scalapb.GeneratedMessageCompanion[io.openisms.api.ConnectedAccount] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.openisms.api.ConnectedAccount] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.openisms.api.ConnectedAccount = {
    var __appId: _root_.scala.Predef.String = ""
    var __appName: _root_.scala.Predef.String = ""
    var __appType: _root_.scala.Predef.String = ""
    var __appUrl: _root_.scala.Predef.String = ""
    var __userId: _root_.scala.Predef.String = ""
    val __scopes: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __appId = _input__.readStringRequireUtf8()
        case 18 =>
          __appName = _input__.readStringRequireUtf8()
        case 26 =>
          __appType = _input__.readStringRequireUtf8()
        case 34 =>
          __appUrl = _input__.readStringRequireUtf8()
        case 42 =>
          __userId = _input__.readStringRequireUtf8()
        case 50 =>
          __scopes += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.openisms.api.ConnectedAccount(
        appId = __appId,
        appName = __appName,
        appType = __appType,
        appUrl = __appUrl,
        userId = __userId,
        scopes = __scopes.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.openisms.api.ConnectedAccount] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.openisms.api.ConnectedAccount(
        appId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        appName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        appType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        appUrl = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        userId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        scopes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiProto.javaDescriptor.getMessageTypes().get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.openisms.api.ConnectedAccount(
    appId = "",
    appName = "",
    appType = "",
    appUrl = "",
    userId = "",
    scopes = _root_.scala.Seq.empty
  )
  implicit class ConnectedAccountLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.ConnectedAccount]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.openisms.api.ConnectedAccount](_l) {
    def appId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.appId)((c_, f_) => c_.copy(appId = f_))
    def appName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.appName)((c_, f_) => c_.copy(appName = f_))
    def appType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.appType)((c_, f_) => c_.copy(appType = f_))
    def appUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.appUrl)((c_, f_) => c_.copy(appUrl = f_))
    def userId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.userId)((c_, f_) => c_.copy(userId = f_))
    def scopes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.scopes)((c_, f_) => c_.copy(scopes = f_))
  }
  final val APP_ID_FIELD_NUMBER = 1
  final val APP_NAME_FIELD_NUMBER = 2
  final val APP_TYPE_FIELD_NUMBER = 3
  final val APP_URL_FIELD_NUMBER = 4
  final val USER_ID_FIELD_NUMBER = 5
  final val SCOPES_FIELD_NUMBER = 6
  def of(
    appId: _root_.scala.Predef.String,
    appName: _root_.scala.Predef.String,
    appType: _root_.scala.Predef.String,
    appUrl: _root_.scala.Predef.String,
    userId: _root_.scala.Predef.String,
    scopes: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.io.openisms.api.ConnectedAccount = _root_.io.openisms.api.ConnectedAccount(
    appId,
    appName,
    appType,
    appUrl,
    userId,
    scopes
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.openisms.v1.ConnectedAccount])
}
