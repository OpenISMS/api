// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.openisms.api

@SerialVersionUID(0L)
final case class OperatingSystem(
    os: io.openisms.api.OperatingSystem.OperatingSystems = io.openisms.api.OperatingSystem.OperatingSystems.undefined,
    majorVersion: _root_.scala.Predef.String = "",
    fullVersion: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OperatingSystem] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = os.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      
      {
        val __value = majorVersion
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = fullVersion
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = os.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      {
        val __v = majorVersion
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = fullVersion
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withOs(__v: io.openisms.api.OperatingSystem.OperatingSystems): OperatingSystem = copy(os = __v)
    def withMajorVersion(__v: _root_.scala.Predef.String): OperatingSystem = copy(majorVersion = __v)
    def withFullVersion(__v: _root_.scala.Predef.String): OperatingSystem = copy(fullVersion = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = os.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = majorVersion
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = fullVersion
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(os.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PString(majorVersion)
        case 3 => _root_.scalapb.descriptors.PString(fullVersion)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.openisms.api.OperatingSystem.type = io.openisms.api.OperatingSystem
    // @@protoc_insertion_point(GeneratedMessage[io.openisms.v1.OperatingSystem])
}

object OperatingSystem extends scalapb.GeneratedMessageCompanion[io.openisms.api.OperatingSystem] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.openisms.api.OperatingSystem] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.openisms.api.OperatingSystem = {
    var __os: io.openisms.api.OperatingSystem.OperatingSystems = io.openisms.api.OperatingSystem.OperatingSystems.undefined
    var __majorVersion: _root_.scala.Predef.String = ""
    var __fullVersion: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __os = io.openisms.api.OperatingSystem.OperatingSystems.fromValue(_input__.readEnum())
        case 18 =>
          __majorVersion = _input__.readStringRequireUtf8()
        case 26 =>
          __fullVersion = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.openisms.api.OperatingSystem(
        os = __os,
        majorVersion = __majorVersion,
        fullVersion = __fullVersion,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.openisms.api.OperatingSystem] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.openisms.api.OperatingSystem(
        os = io.openisms.api.OperatingSystem.OperatingSystems.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.openisms.api.OperatingSystem.OperatingSystems.undefined.scalaValueDescriptor).number),
        majorVersion = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        fullVersion = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiProto.javaDescriptor.getMessageTypes().get(12)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiProto.scalaDescriptor.messages(12)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => io.openisms.api.OperatingSystem.OperatingSystems
    }
  }
  lazy val defaultInstance = io.openisms.api.OperatingSystem(
    os = io.openisms.api.OperatingSystem.OperatingSystems.undefined,
    majorVersion = "",
    fullVersion = ""
  )
  sealed abstract class OperatingSystems(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = OperatingSystems
    def isundefined: _root_.scala.Boolean = false
    def ismacos: _root_.scala.Boolean = false
    def iswindows: _root_.scala.Boolean = false
    def islinux: _root_.scala.Boolean = false
    def isunix: _root_.scala.Boolean = false
    def ischromeos: _root_.scala.Boolean = false
    def isios: _root_.scala.Boolean = false
    def isandroid: _root_.scala.Boolean = false
    def isros: _root_.scala.Boolean = false
    def isother: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[OperatingSystems] = io.openisms.api.OperatingSystem.OperatingSystems
    final def asRecognized: _root_.scala.Option[io.openisms.api.OperatingSystem.OperatingSystems.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.openisms.api.OperatingSystem.OperatingSystems.Recognized])
  }
  
  object OperatingSystems extends _root_.scalapb.GeneratedEnumCompanion[OperatingSystems] {
    sealed trait Recognized extends OperatingSystems
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[OperatingSystems] = this
    
    @SerialVersionUID(0L)
    case object undefined extends OperatingSystems(0) with OperatingSystems.Recognized {
      val index = 0
      val name = "undefined"
      override def isundefined: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object macos extends OperatingSystems(1) with OperatingSystems.Recognized {
      val index = 1
      val name = "macos"
      override def ismacos: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object windows extends OperatingSystems(2) with OperatingSystems.Recognized {
      val index = 2
      val name = "windows"
      override def iswindows: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object linux extends OperatingSystems(3) with OperatingSystems.Recognized {
      val index = 3
      val name = "linux"
      override def islinux: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object unix extends OperatingSystems(4) with OperatingSystems.Recognized {
      val index = 4
      val name = "unix"
      override def isunix: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object chrome_os extends OperatingSystems(5) with OperatingSystems.Recognized {
      val index = 5
      val name = "chrome_os"
      override def ischromeos: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object ios extends OperatingSystems(10) with OperatingSystems.Recognized {
      val index = 6
      val name = "ios"
      override def isios: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object android extends OperatingSystems(11) with OperatingSystems.Recognized {
      val index = 7
      val name = "android"
      override def isandroid: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object ros extends OperatingSystems(14) with OperatingSystems.Recognized {
      val index = 8
      val name = "ros"
      override def isros: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object other extends OperatingSystems(15) with OperatingSystems.Recognized {
      val index = 9
      val name = "other"
      override def isother: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends OperatingSystems(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values = scala.collection.immutable.Seq(undefined, macos, windows, linux, unix, chrome_os, ios, android, ros, other)
    def fromValue(__value: _root_.scala.Int): OperatingSystems = __value match {
      case 0 => undefined
      case 1 => macos
      case 2 => windows
      case 3 => linux
      case 4 => unix
      case 5 => chrome_os
      case 10 => ios
      case 11 => android
      case 14 => ros
      case 15 => other
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.openisms.api.OperatingSystem.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.openisms.api.OperatingSystem.scalaDescriptor.enums(0)
  }
  implicit class OperatingSystemLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.OperatingSystem]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.openisms.api.OperatingSystem](_l) {
    def os: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.OperatingSystem.OperatingSystems] = field(_.os)((c_, f_) => c_.copy(os = f_))
    def majorVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.majorVersion)((c_, f_) => c_.copy(majorVersion = f_))
    def fullVersion: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fullVersion)((c_, f_) => c_.copy(fullVersion = f_))
  }
  final val OS_FIELD_NUMBER = 1
  final val MAJOR_VERSION_FIELD_NUMBER = 2
  final val FULL_VERSION_FIELD_NUMBER = 3
  def of(
    os: io.openisms.api.OperatingSystem.OperatingSystems,
    majorVersion: _root_.scala.Predef.String,
    fullVersion: _root_.scala.Predef.String
  ): _root_.io.openisms.api.OperatingSystem = _root_.io.openisms.api.OperatingSystem(
    os,
    majorVersion,
    fullVersion
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.openisms.v1.OperatingSystem])
}
