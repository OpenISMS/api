// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.openisms.api

/** @param identifier
  *   company-internal
  */
@SerialVersionUID(0L)
final case class PhysicalObject(
    `type`: _root_.scala.Predef.String = "",
    name: _root_.scala.Predef.String = "",
    manufacturer: _root_.scala.Predef.String = "",
    vendor: _root_.scala.Predef.String = "",
    identifier: _root_.scala.Predef.String = "",
    serialNumber: _root_.scala.Predef.String = "",
    imei: _root_.scala.Predef.String = "",
    meid: _root_.scala.Predef.String = "",
    networks: _root_.scala.Seq[io.openisms.api.Network] = _root_.scala.Seq.empty,
    hostname: _root_.scala.Predef.String = "",
    userAccounts: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    os: _root_.scala.Option[io.openisms.api.OperatingSystem] = _root_.scala.None,
    security: _root_.scala.Option[io.openisms.api.SecurityFeatures] = _root_.scala.None,
    profiles: _root_.scala.Seq[io.openisms.api.Profile] = _root_.scala.Seq.empty,
    apps: _root_.scala.Seq[io.openisms.api.Application] = _root_.scala.Seq.empty,
    tags: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PhysicalObject] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = `type`
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = manufacturer
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = vendor
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = identifier
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = serialNumber
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      
      {
        val __value = imei
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = meid
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      networks.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = hostname
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, __value)
        }
      };
      userAccounts.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, __value)
      }
      if (os.isDefined) {
        val __value = os.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (security.isDefined) {
        val __value = security.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      profiles.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      apps.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      tags.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(20, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = `type`
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = manufacturer
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = vendor
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = identifier
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = serialNumber
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = imei
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = meid
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      networks.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = hostname
        if (!__v.isEmpty) {
          _output__.writeString(10, __v)
        }
      };
      userAccounts.foreach { __v =>
        val __m = __v
        _output__.writeString(11, __m)
      };
      os.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      security.foreach { __v =>
        val __m = __v
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      profiles.foreach { __v =>
        val __m = __v
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      apps.foreach { __v =>
        val __m = __v
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      tags.foreach { __v =>
        val __m = __v
        _output__.writeString(20, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def withType(__v: _root_.scala.Predef.String): PhysicalObject = copy(`type` = __v)
    def withName(__v: _root_.scala.Predef.String): PhysicalObject = copy(name = __v)
    def withManufacturer(__v: _root_.scala.Predef.String): PhysicalObject = copy(manufacturer = __v)
    def withVendor(__v: _root_.scala.Predef.String): PhysicalObject = copy(vendor = __v)
    def withIdentifier(__v: _root_.scala.Predef.String): PhysicalObject = copy(identifier = __v)
    def withSerialNumber(__v: _root_.scala.Predef.String): PhysicalObject = copy(serialNumber = __v)
    def withImei(__v: _root_.scala.Predef.String): PhysicalObject = copy(imei = __v)
    def withMeid(__v: _root_.scala.Predef.String): PhysicalObject = copy(meid = __v)
    def clearNetworks = copy(networks = _root_.scala.Seq.empty)
    def addNetworks(__vs: io.openisms.api.Network *): PhysicalObject = addAllNetworks(__vs)
    def addAllNetworks(__vs: Iterable[io.openisms.api.Network]): PhysicalObject = copy(networks = networks ++ __vs)
    def withNetworks(__v: _root_.scala.Seq[io.openisms.api.Network]): PhysicalObject = copy(networks = __v)
    def withHostname(__v: _root_.scala.Predef.String): PhysicalObject = copy(hostname = __v)
    def clearUserAccounts = copy(userAccounts = _root_.scala.Seq.empty)
    def addUserAccounts(__vs: _root_.scala.Predef.String *): PhysicalObject = addAllUserAccounts(__vs)
    def addAllUserAccounts(__vs: Iterable[_root_.scala.Predef.String]): PhysicalObject = copy(userAccounts = userAccounts ++ __vs)
    def withUserAccounts(__v: _root_.scala.Seq[_root_.scala.Predef.String]): PhysicalObject = copy(userAccounts = __v)
    def getOs: io.openisms.api.OperatingSystem = os.getOrElse(io.openisms.api.OperatingSystem.defaultInstance)
    def clearOs: PhysicalObject = copy(os = _root_.scala.None)
    def withOs(__v: io.openisms.api.OperatingSystem): PhysicalObject = copy(os = Option(__v))
    def getSecurity: io.openisms.api.SecurityFeatures = security.getOrElse(io.openisms.api.SecurityFeatures.defaultInstance)
    def clearSecurity: PhysicalObject = copy(security = _root_.scala.None)
    def withSecurity(__v: io.openisms.api.SecurityFeatures): PhysicalObject = copy(security = Option(__v))
    def clearProfiles = copy(profiles = _root_.scala.Seq.empty)
    def addProfiles(__vs: io.openisms.api.Profile *): PhysicalObject = addAllProfiles(__vs)
    def addAllProfiles(__vs: Iterable[io.openisms.api.Profile]): PhysicalObject = copy(profiles = profiles ++ __vs)
    def withProfiles(__v: _root_.scala.Seq[io.openisms.api.Profile]): PhysicalObject = copy(profiles = __v)
    def clearApps = copy(apps = _root_.scala.Seq.empty)
    def addApps(__vs: io.openisms.api.Application *): PhysicalObject = addAllApps(__vs)
    def addAllApps(__vs: Iterable[io.openisms.api.Application]): PhysicalObject = copy(apps = apps ++ __vs)
    def withApps(__v: _root_.scala.Seq[io.openisms.api.Application]): PhysicalObject = copy(apps = __v)
    def clearTags = copy(tags = _root_.scala.Seq.empty)
    def addTags(__vs: _root_.scala.Predef.String *): PhysicalObject = addAllTags(__vs)
    def addAllTags(__vs: Iterable[_root_.scala.Predef.String]): PhysicalObject = copy(tags = tags ++ __vs)
    def withTags(__v: _root_.scala.Seq[_root_.scala.Predef.String]): PhysicalObject = copy(tags = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = `type`
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = manufacturer
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = vendor
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = identifier
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = serialNumber
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = imei
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = meid
          if (__t != "") __t else null
        }
        case 9 => networks
        case 10 => {
          val __t = hostname
          if (__t != "") __t else null
        }
        case 11 => userAccounts
        case 12 => os.orNull
        case 13 => security.orNull
        case 14 => profiles
        case 15 => apps
        case 20 => tags
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(`type`)
        case 2 => _root_.scalapb.descriptors.PString(name)
        case 3 => _root_.scalapb.descriptors.PString(manufacturer)
        case 4 => _root_.scalapb.descriptors.PString(vendor)
        case 5 => _root_.scalapb.descriptors.PString(identifier)
        case 6 => _root_.scalapb.descriptors.PString(serialNumber)
        case 7 => _root_.scalapb.descriptors.PString(imei)
        case 8 => _root_.scalapb.descriptors.PString(meid)
        case 9 => _root_.scalapb.descriptors.PRepeated(networks.iterator.map(_.toPMessage).toVector)
        case 10 => _root_.scalapb.descriptors.PString(hostname)
        case 11 => _root_.scalapb.descriptors.PRepeated(userAccounts.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 12 => os.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => security.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => _root_.scalapb.descriptors.PRepeated(profiles.iterator.map(_.toPMessage).toVector)
        case 15 => _root_.scalapb.descriptors.PRepeated(apps.iterator.map(_.toPMessage).toVector)
        case 20 => _root_.scalapb.descriptors.PRepeated(tags.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.openisms.api.PhysicalObject.type = io.openisms.api.PhysicalObject
    // @@protoc_insertion_point(GeneratedMessage[io.openisms.v1.PhysicalObject])
}

object PhysicalObject extends scalapb.GeneratedMessageCompanion[io.openisms.api.PhysicalObject] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.openisms.api.PhysicalObject] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.openisms.api.PhysicalObject = {
    var __type: _root_.scala.Predef.String = ""
    var __name: _root_.scala.Predef.String = ""
    var __manufacturer: _root_.scala.Predef.String = ""
    var __vendor: _root_.scala.Predef.String = ""
    var __identifier: _root_.scala.Predef.String = ""
    var __serialNumber: _root_.scala.Predef.String = ""
    var __imei: _root_.scala.Predef.String = ""
    var __meid: _root_.scala.Predef.String = ""
    val __networks: _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Network] = new _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Network]
    var __hostname: _root_.scala.Predef.String = ""
    val __userAccounts: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __os: _root_.scala.Option[io.openisms.api.OperatingSystem] = _root_.scala.None
    var __security: _root_.scala.Option[io.openisms.api.SecurityFeatures] = _root_.scala.None
    val __profiles: _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Profile] = new _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Profile]
    val __apps: _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Application] = new _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Application]
    val __tags: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __type = _input__.readStringRequireUtf8()
        case 18 =>
          __name = _input__.readStringRequireUtf8()
        case 26 =>
          __manufacturer = _input__.readStringRequireUtf8()
        case 34 =>
          __vendor = _input__.readStringRequireUtf8()
        case 42 =>
          __identifier = _input__.readStringRequireUtf8()
        case 50 =>
          __serialNumber = _input__.readStringRequireUtf8()
        case 58 =>
          __imei = _input__.readStringRequireUtf8()
        case 66 =>
          __meid = _input__.readStringRequireUtf8()
        case 74 =>
          __networks += _root_.scalapb.LiteParser.readMessage[io.openisms.api.Network](_input__)
        case 82 =>
          __hostname = _input__.readStringRequireUtf8()
        case 90 =>
          __userAccounts += _input__.readStringRequireUtf8()
        case 98 =>
          __os = Option(__os.fold(_root_.scalapb.LiteParser.readMessage[io.openisms.api.OperatingSystem](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 106 =>
          __security = Option(__security.fold(_root_.scalapb.LiteParser.readMessage[io.openisms.api.SecurityFeatures](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 114 =>
          __profiles += _root_.scalapb.LiteParser.readMessage[io.openisms.api.Profile](_input__)
        case 122 =>
          __apps += _root_.scalapb.LiteParser.readMessage[io.openisms.api.Application](_input__)
        case 162 =>
          __tags += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.openisms.api.PhysicalObject(
        `type` = __type,
        name = __name,
        manufacturer = __manufacturer,
        vendor = __vendor,
        identifier = __identifier,
        serialNumber = __serialNumber,
        imei = __imei,
        meid = __meid,
        networks = __networks.result(),
        hostname = __hostname,
        userAccounts = __userAccounts.result(),
        os = __os,
        security = __security,
        profiles = __profiles.result(),
        apps = __apps.result(),
        tags = __tags.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.openisms.api.PhysicalObject] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.openisms.api.PhysicalObject(
        `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        manufacturer = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        vendor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        identifier = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        serialNumber = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        imei = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        meid = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        networks = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[io.openisms.api.Network]]).getOrElse(_root_.scala.Seq.empty),
        hostname = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        userAccounts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        os = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[io.openisms.api.OperatingSystem]]),
        security = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[io.openisms.api.SecurityFeatures]]),
        profiles = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Seq[io.openisms.api.Profile]]).getOrElse(_root_.scala.Seq.empty),
        apps = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Seq[io.openisms.api.Application]]).getOrElse(_root_.scala.Seq.empty),
        tags = __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiProto.javaDescriptor.getMessageTypes().get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 9 => __out = io.openisms.api.Network
      case 12 => __out = io.openisms.api.OperatingSystem
      case 13 => __out = io.openisms.api.SecurityFeatures
      case 14 => __out = io.openisms.api.Profile
      case 15 => __out = io.openisms.api.Application
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.openisms.api.PhysicalObject(
    `type` = "",
    name = "",
    manufacturer = "",
    vendor = "",
    identifier = "",
    serialNumber = "",
    imei = "",
    meid = "",
    networks = _root_.scala.Seq.empty,
    hostname = "",
    userAccounts = _root_.scala.Seq.empty,
    os = _root_.scala.None,
    security = _root_.scala.None,
    profiles = _root_.scala.Seq.empty,
    apps = _root_.scala.Seq.empty,
    tags = _root_.scala.Seq.empty
  )
  implicit class PhysicalObjectLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.PhysicalObject]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.openisms.api.PhysicalObject](_l) {
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def manufacturer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.manufacturer)((c_, f_) => c_.copy(manufacturer = f_))
    def vendor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.vendor)((c_, f_) => c_.copy(vendor = f_))
    def identifier: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.identifier)((c_, f_) => c_.copy(identifier = f_))
    def serialNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.serialNumber)((c_, f_) => c_.copy(serialNumber = f_))
    def imei: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.imei)((c_, f_) => c_.copy(imei = f_))
    def meid: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.meid)((c_, f_) => c_.copy(meid = f_))
    def networks: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.openisms.api.Network]] = field(_.networks)((c_, f_) => c_.copy(networks = f_))
    def hostname: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.hostname)((c_, f_) => c_.copy(hostname = f_))
    def userAccounts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.userAccounts)((c_, f_) => c_.copy(userAccounts = f_))
    def os: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.OperatingSystem] = field(_.getOs)((c_, f_) => c_.copy(os = Option(f_)))
    def optionalOs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.openisms.api.OperatingSystem]] = field(_.os)((c_, f_) => c_.copy(os = f_))
    def security: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.SecurityFeatures] = field(_.getSecurity)((c_, f_) => c_.copy(security = Option(f_)))
    def optionalSecurity: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.openisms.api.SecurityFeatures]] = field(_.security)((c_, f_) => c_.copy(security = f_))
    def profiles: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.openisms.api.Profile]] = field(_.profiles)((c_, f_) => c_.copy(profiles = f_))
    def apps: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.openisms.api.Application]] = field(_.apps)((c_, f_) => c_.copy(apps = f_))
    def tags: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.tags)((c_, f_) => c_.copy(tags = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val NAME_FIELD_NUMBER = 2
  final val MANUFACTURER_FIELD_NUMBER = 3
  final val VENDOR_FIELD_NUMBER = 4
  final val IDENTIFIER_FIELD_NUMBER = 5
  final val SERIAL_NUMBER_FIELD_NUMBER = 6
  final val IMEI_FIELD_NUMBER = 7
  final val MEID_FIELD_NUMBER = 8
  final val NETWORKS_FIELD_NUMBER = 9
  final val HOSTNAME_FIELD_NUMBER = 10
  final val USER_ACCOUNTS_FIELD_NUMBER = 11
  final val OS_FIELD_NUMBER = 12
  final val SECURITY_FIELD_NUMBER = 13
  final val PROFILES_FIELD_NUMBER = 14
  final val APPS_FIELD_NUMBER = 15
  final val TAGS_FIELD_NUMBER = 20
  def of(
    `type`: _root_.scala.Predef.String,
    name: _root_.scala.Predef.String,
    manufacturer: _root_.scala.Predef.String,
    vendor: _root_.scala.Predef.String,
    identifier: _root_.scala.Predef.String,
    serialNumber: _root_.scala.Predef.String,
    imei: _root_.scala.Predef.String,
    meid: _root_.scala.Predef.String,
    networks: _root_.scala.Seq[io.openisms.api.Network],
    hostname: _root_.scala.Predef.String,
    userAccounts: _root_.scala.Seq[_root_.scala.Predef.String],
    os: _root_.scala.Option[io.openisms.api.OperatingSystem],
    security: _root_.scala.Option[io.openisms.api.SecurityFeatures],
    profiles: _root_.scala.Seq[io.openisms.api.Profile],
    apps: _root_.scala.Seq[io.openisms.api.Application],
    tags: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.io.openisms.api.PhysicalObject = _root_.io.openisms.api.PhysicalObject(
    `type`,
    name,
    manufacturer,
    vendor,
    identifier,
    serialNumber,
    imei,
    meid,
    networks,
    hostname,
    userAccounts,
    os,
    security,
    profiles,
    apps,
    tags
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.openisms.v1.PhysicalObject])
}
