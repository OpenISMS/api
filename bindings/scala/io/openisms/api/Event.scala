// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.openisms.api

@SerialVersionUID(0L)
final case class Event(
    meta: _root_.scala.Option[io.openisms.api.Meta] = _root_.scala.None,
    source: _root_.scala.Option[io.openisms.api.SourceSystem] = _root_.scala.None,
    users: _root_.scala.Seq[io.openisms.api.User] = _root_.scala.Seq.empty,
    devices: _root_.scala.Seq[io.openisms.api.PhysicalObject] = _root_.scala.Seq.empty,
    repositories: _root_.scala.Seq[io.openisms.api.Repository] = _root_.scala.Seq.empty,
    certification: _root_.scala.Seq[io.openisms.api.Certification] = _root_.scala.Seq.empty,
    pentest: _root_.scala.Seq[io.openisms.api.Pentest] = _root_.scala.Seq.empty,
    stats: _root_.scala.Seq[io.openisms.api.Statistics] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Event] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (meta.isDefined) {
        val __value = meta.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (source.isDefined) {
        val __value = source.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      users.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      devices.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      repositories.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      certification.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      pentest.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      stats.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      meta.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      source.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      users.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      devices.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      repositories.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      certification.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      pentest.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      stats.foreach { __v =>
        val __m = __v
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getMeta: io.openisms.api.Meta = meta.getOrElse(io.openisms.api.Meta.defaultInstance)
    def clearMeta: Event = copy(meta = _root_.scala.None)
    def withMeta(__v: io.openisms.api.Meta): Event = copy(meta = Option(__v))
    def getSource: io.openisms.api.SourceSystem = source.getOrElse(io.openisms.api.SourceSystem.defaultInstance)
    def clearSource: Event = copy(source = _root_.scala.None)
    def withSource(__v: io.openisms.api.SourceSystem): Event = copy(source = Option(__v))
    def clearUsers = copy(users = _root_.scala.Seq.empty)
    def addUsers(__vs: io.openisms.api.User *): Event = addAllUsers(__vs)
    def addAllUsers(__vs: Iterable[io.openisms.api.User]): Event = copy(users = users ++ __vs)
    def withUsers(__v: _root_.scala.Seq[io.openisms.api.User]): Event = copy(users = __v)
    def clearDevices = copy(devices = _root_.scala.Seq.empty)
    def addDevices(__vs: io.openisms.api.PhysicalObject *): Event = addAllDevices(__vs)
    def addAllDevices(__vs: Iterable[io.openisms.api.PhysicalObject]): Event = copy(devices = devices ++ __vs)
    def withDevices(__v: _root_.scala.Seq[io.openisms.api.PhysicalObject]): Event = copy(devices = __v)
    def clearRepositories = copy(repositories = _root_.scala.Seq.empty)
    def addRepositories(__vs: io.openisms.api.Repository *): Event = addAllRepositories(__vs)
    def addAllRepositories(__vs: Iterable[io.openisms.api.Repository]): Event = copy(repositories = repositories ++ __vs)
    def withRepositories(__v: _root_.scala.Seq[io.openisms.api.Repository]): Event = copy(repositories = __v)
    def clearCertification = copy(certification = _root_.scala.Seq.empty)
    def addCertification(__vs: io.openisms.api.Certification *): Event = addAllCertification(__vs)
    def addAllCertification(__vs: Iterable[io.openisms.api.Certification]): Event = copy(certification = certification ++ __vs)
    def withCertification(__v: _root_.scala.Seq[io.openisms.api.Certification]): Event = copy(certification = __v)
    def clearPentest = copy(pentest = _root_.scala.Seq.empty)
    def addPentest(__vs: io.openisms.api.Pentest *): Event = addAllPentest(__vs)
    def addAllPentest(__vs: Iterable[io.openisms.api.Pentest]): Event = copy(pentest = pentest ++ __vs)
    def withPentest(__v: _root_.scala.Seq[io.openisms.api.Pentest]): Event = copy(pentest = __v)
    def clearStats = copy(stats = _root_.scala.Seq.empty)
    def addStats(__vs: io.openisms.api.Statistics *): Event = addAllStats(__vs)
    def addAllStats(__vs: Iterable[io.openisms.api.Statistics]): Event = copy(stats = stats ++ __vs)
    def withStats(__v: _root_.scala.Seq[io.openisms.api.Statistics]): Event = copy(stats = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => meta.orNull
        case 2 => source.orNull
        case 3 => users
        case 4 => devices
        case 7 => repositories
        case 9 => certification
        case 11 => pentest
        case 13 => stats
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => meta.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => source.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(users.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(devices.iterator.map(_.toPMessage).toVector)
        case 7 => _root_.scalapb.descriptors.PRepeated(repositories.iterator.map(_.toPMessage).toVector)
        case 9 => _root_.scalapb.descriptors.PRepeated(certification.iterator.map(_.toPMessage).toVector)
        case 11 => _root_.scalapb.descriptors.PRepeated(pentest.iterator.map(_.toPMessage).toVector)
        case 13 => _root_.scalapb.descriptors.PRepeated(stats.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.openisms.api.Event.type = io.openisms.api.Event
    // @@protoc_insertion_point(GeneratedMessage[io.openisms.v1.Event])
}

object Event extends scalapb.GeneratedMessageCompanion[io.openisms.api.Event] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.openisms.api.Event] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.openisms.api.Event = {
    var __meta: _root_.scala.Option[io.openisms.api.Meta] = _root_.scala.None
    var __source: _root_.scala.Option[io.openisms.api.SourceSystem] = _root_.scala.None
    val __users: _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.User] = new _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.User]
    val __devices: _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.PhysicalObject] = new _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.PhysicalObject]
    val __repositories: _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Repository] = new _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Repository]
    val __certification: _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Certification] = new _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Certification]
    val __pentest: _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Pentest] = new _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Pentest]
    val __stats: _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Statistics] = new _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Statistics]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __meta = Option(__meta.fold(_root_.scalapb.LiteParser.readMessage[io.openisms.api.Meta](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __source = Option(__source.fold(_root_.scalapb.LiteParser.readMessage[io.openisms.api.SourceSystem](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __users += _root_.scalapb.LiteParser.readMessage[io.openisms.api.User](_input__)
        case 34 =>
          __devices += _root_.scalapb.LiteParser.readMessage[io.openisms.api.PhysicalObject](_input__)
        case 58 =>
          __repositories += _root_.scalapb.LiteParser.readMessage[io.openisms.api.Repository](_input__)
        case 74 =>
          __certification += _root_.scalapb.LiteParser.readMessage[io.openisms.api.Certification](_input__)
        case 90 =>
          __pentest += _root_.scalapb.LiteParser.readMessage[io.openisms.api.Pentest](_input__)
        case 106 =>
          __stats += _root_.scalapb.LiteParser.readMessage[io.openisms.api.Statistics](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.openisms.api.Event(
        meta = __meta,
        source = __source,
        users = __users.result(),
        devices = __devices.result(),
        repositories = __repositories.result(),
        certification = __certification.result(),
        pentest = __pentest.result(),
        stats = __stats.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.openisms.api.Event] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.openisms.api.Event(
        meta = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.openisms.api.Meta]]),
        source = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.openisms.api.SourceSystem]]),
        users = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.openisms.api.User]]).getOrElse(_root_.scala.Seq.empty),
        devices = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[io.openisms.api.PhysicalObject]]).getOrElse(_root_.scala.Seq.empty),
        repositories = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[io.openisms.api.Repository]]).getOrElse(_root_.scala.Seq.empty),
        certification = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[io.openisms.api.Certification]]).getOrElse(_root_.scala.Seq.empty),
        pentest = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Seq[io.openisms.api.Pentest]]).getOrElse(_root_.scala.Seq.empty),
        stats = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Seq[io.openisms.api.Statistics]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.openisms.api.Meta
      case 2 => __out = io.openisms.api.SourceSystem
      case 3 => __out = io.openisms.api.User
      case 4 => __out = io.openisms.api.PhysicalObject
      case 7 => __out = io.openisms.api.Repository
      case 9 => __out = io.openisms.api.Certification
      case 11 => __out = io.openisms.api.Pentest
      case 13 => __out = io.openisms.api.Statistics
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.openisms.api.Event(
    meta = _root_.scala.None,
    source = _root_.scala.None,
    users = _root_.scala.Seq.empty,
    devices = _root_.scala.Seq.empty,
    repositories = _root_.scala.Seq.empty,
    certification = _root_.scala.Seq.empty,
    pentest = _root_.scala.Seq.empty,
    stats = _root_.scala.Seq.empty
  )
  implicit class EventLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.Event]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.openisms.api.Event](_l) {
    def meta: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.Meta] = field(_.getMeta)((c_, f_) => c_.copy(meta = Option(f_)))
    def optionalMeta: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.openisms.api.Meta]] = field(_.meta)((c_, f_) => c_.copy(meta = f_))
    def source: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.SourceSystem] = field(_.getSource)((c_, f_) => c_.copy(source = Option(f_)))
    def optionalSource: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.openisms.api.SourceSystem]] = field(_.source)((c_, f_) => c_.copy(source = f_))
    def users: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.openisms.api.User]] = field(_.users)((c_, f_) => c_.copy(users = f_))
    def devices: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.openisms.api.PhysicalObject]] = field(_.devices)((c_, f_) => c_.copy(devices = f_))
    def repositories: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.openisms.api.Repository]] = field(_.repositories)((c_, f_) => c_.copy(repositories = f_))
    def certification: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.openisms.api.Certification]] = field(_.certification)((c_, f_) => c_.copy(certification = f_))
    def pentest: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.openisms.api.Pentest]] = field(_.pentest)((c_, f_) => c_.copy(pentest = f_))
    def stats: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.openisms.api.Statistics]] = field(_.stats)((c_, f_) => c_.copy(stats = f_))
  }
  final val META_FIELD_NUMBER = 1
  final val SOURCE_FIELD_NUMBER = 2
  final val USERS_FIELD_NUMBER = 3
  final val DEVICES_FIELD_NUMBER = 4
  final val REPOSITORIES_FIELD_NUMBER = 7
  final val CERTIFICATION_FIELD_NUMBER = 9
  final val PENTEST_FIELD_NUMBER = 11
  final val STATS_FIELD_NUMBER = 13
  def of(
    meta: _root_.scala.Option[io.openisms.api.Meta],
    source: _root_.scala.Option[io.openisms.api.SourceSystem],
    users: _root_.scala.Seq[io.openisms.api.User],
    devices: _root_.scala.Seq[io.openisms.api.PhysicalObject],
    repositories: _root_.scala.Seq[io.openisms.api.Repository],
    certification: _root_.scala.Seq[io.openisms.api.Certification],
    pentest: _root_.scala.Seq[io.openisms.api.Pentest],
    stats: _root_.scala.Seq[io.openisms.api.Statistics]
  ): _root_.io.openisms.api.Event = _root_.io.openisms.api.Event(
    meta,
    source,
    users,
    devices,
    repositories,
    certification,
    pentest,
    stats
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.openisms.v1.Event])
}
