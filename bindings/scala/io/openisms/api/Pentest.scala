// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.openisms.api

@SerialVersionUID(0L)
final case class Pentest(
    id: _root_.scala.Predef.String = "",
    begin: _root_.scala.Option[io.openisms.api.Date] = _root_.scala.None,
    end: _root_.scala.Option[io.openisms.api.Date] = _root_.scala.None,
    company: _root_.scala.Option[io.openisms.api.Company] = _root_.scala.None,
    focus: _root_.scala.Predef.String = "",
    passed: _root_.scala.Boolean = false,
    result: _root_.scala.Predef.String = "",
    url: _root_.scala.Predef.String = "",
    contacts: _root_.scala.Seq[io.openisms.api.Person] = _root_.scala.Seq.empty,
    tags: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Pentest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (begin.isDefined) {
        val __value = begin.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (end.isDefined) {
        val __value = end.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (company.isDefined) {
        val __value = company.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = focus
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = passed
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, __value)
        }
      };
      
      {
        val __value = result
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = url
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        }
      };
      contacts.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      tags.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      begin.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      end.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      company.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = focus
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = passed
        if (__v != false) {
          _output__.writeBool(6, __v)
        }
      };
      {
        val __v = result
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = url
        if (!__v.isEmpty) {
          _output__.writeString(8, __v)
        }
      };
      contacts.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      tags.foreach { __v =>
        val __m = __v
        _output__.writeString(10, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def withId(__v: _root_.scala.Predef.String): Pentest = copy(id = __v)
    def getBegin: io.openisms.api.Date = begin.getOrElse(io.openisms.api.Date.defaultInstance)
    def clearBegin: Pentest = copy(begin = _root_.scala.None)
    def withBegin(__v: io.openisms.api.Date): Pentest = copy(begin = Option(__v))
    def getEnd: io.openisms.api.Date = end.getOrElse(io.openisms.api.Date.defaultInstance)
    def clearEnd: Pentest = copy(end = _root_.scala.None)
    def withEnd(__v: io.openisms.api.Date): Pentest = copy(end = Option(__v))
    def getCompany: io.openisms.api.Company = company.getOrElse(io.openisms.api.Company.defaultInstance)
    def clearCompany: Pentest = copy(company = _root_.scala.None)
    def withCompany(__v: io.openisms.api.Company): Pentest = copy(company = Option(__v))
    def withFocus(__v: _root_.scala.Predef.String): Pentest = copy(focus = __v)
    def withPassed(__v: _root_.scala.Boolean): Pentest = copy(passed = __v)
    def withResult(__v: _root_.scala.Predef.String): Pentest = copy(result = __v)
    def withUrl(__v: _root_.scala.Predef.String): Pentest = copy(url = __v)
    def clearContacts = copy(contacts = _root_.scala.Seq.empty)
    def addContacts(__vs: io.openisms.api.Person *): Pentest = addAllContacts(__vs)
    def addAllContacts(__vs: Iterable[io.openisms.api.Person]): Pentest = copy(contacts = contacts ++ __vs)
    def withContacts(__v: _root_.scala.Seq[io.openisms.api.Person]): Pentest = copy(contacts = __v)
    def clearTags = copy(tags = _root_.scala.Seq.empty)
    def addTags(__vs: _root_.scala.Predef.String *): Pentest = addAllTags(__vs)
    def addAllTags(__vs: Iterable[_root_.scala.Predef.String]): Pentest = copy(tags = tags ++ __vs)
    def withTags(__v: _root_.scala.Seq[_root_.scala.Predef.String]): Pentest = copy(tags = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 2 => begin.orNull
        case 3 => end.orNull
        case 4 => company.orNull
        case 5 => {
          val __t = focus
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = passed
          if (__t != false) __t else null
        }
        case 7 => {
          val __t = result
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = url
          if (__t != "") __t else null
        }
        case 9 => contacts
        case 10 => tags
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 2 => begin.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => end.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => company.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PString(focus)
        case 6 => _root_.scalapb.descriptors.PBoolean(passed)
        case 7 => _root_.scalapb.descriptors.PString(result)
        case 8 => _root_.scalapb.descriptors.PString(url)
        case 9 => _root_.scalapb.descriptors.PRepeated(contacts.iterator.map(_.toPMessage).toVector)
        case 10 => _root_.scalapb.descriptors.PRepeated(tags.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.openisms.api.Pentest.type = io.openisms.api.Pentest
    // @@protoc_insertion_point(GeneratedMessage[io.openisms.v1.Pentest])
}

object Pentest extends scalapb.GeneratedMessageCompanion[io.openisms.api.Pentest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.openisms.api.Pentest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.openisms.api.Pentest = {
    var __id: _root_.scala.Predef.String = ""
    var __begin: _root_.scala.Option[io.openisms.api.Date] = _root_.scala.None
    var __end: _root_.scala.Option[io.openisms.api.Date] = _root_.scala.None
    var __company: _root_.scala.Option[io.openisms.api.Company] = _root_.scala.None
    var __focus: _root_.scala.Predef.String = ""
    var __passed: _root_.scala.Boolean = false
    var __result: _root_.scala.Predef.String = ""
    var __url: _root_.scala.Predef.String = ""
    val __contacts: _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Person] = new _root_.scala.collection.immutable.VectorBuilder[io.openisms.api.Person]
    val __tags: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __id = _input__.readStringRequireUtf8()
        case 18 =>
          __begin = Option(__begin.fold(_root_.scalapb.LiteParser.readMessage[io.openisms.api.Date](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __end = Option(__end.fold(_root_.scalapb.LiteParser.readMessage[io.openisms.api.Date](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __company = Option(__company.fold(_root_.scalapb.LiteParser.readMessage[io.openisms.api.Company](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __focus = _input__.readStringRequireUtf8()
        case 48 =>
          __passed = _input__.readBool()
        case 58 =>
          __result = _input__.readStringRequireUtf8()
        case 66 =>
          __url = _input__.readStringRequireUtf8()
        case 74 =>
          __contacts += _root_.scalapb.LiteParser.readMessage[io.openisms.api.Person](_input__)
        case 82 =>
          __tags += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.openisms.api.Pentest(
        id = __id,
        begin = __begin,
        end = __end,
        company = __company,
        focus = __focus,
        passed = __passed,
        result = __result,
        url = __url,
        contacts = __contacts.result(),
        tags = __tags.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.openisms.api.Pentest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.openisms.api.Pentest(
        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        begin = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.openisms.api.Date]]),
        end = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.openisms.api.Date]]),
        company = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.openisms.api.Company]]),
        focus = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        passed = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        result = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        url = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        contacts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Seq[io.openisms.api.Person]]).getOrElse(_root_.scala.Seq.empty),
        tags = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiProto.javaDescriptor.getMessageTypes().get(18)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiProto.scalaDescriptor.messages(18)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = io.openisms.api.Date
      case 3 => __out = io.openisms.api.Date
      case 4 => __out = io.openisms.api.Company
      case 9 => __out = io.openisms.api.Person
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.openisms.api.Pentest(
    id = "",
    begin = _root_.scala.None,
    end = _root_.scala.None,
    company = _root_.scala.None,
    focus = "",
    passed = false,
    result = "",
    url = "",
    contacts = _root_.scala.Seq.empty,
    tags = _root_.scala.Seq.empty
  )
  implicit class PentestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.Pentest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.openisms.api.Pentest](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def begin: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.Date] = field(_.getBegin)((c_, f_) => c_.copy(begin = Option(f_)))
    def optionalBegin: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.openisms.api.Date]] = field(_.begin)((c_, f_) => c_.copy(begin = f_))
    def end: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.Date] = field(_.getEnd)((c_, f_) => c_.copy(end = Option(f_)))
    def optionalEnd: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.openisms.api.Date]] = field(_.end)((c_, f_) => c_.copy(end = f_))
    def company: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.Company] = field(_.getCompany)((c_, f_) => c_.copy(company = Option(f_)))
    def optionalCompany: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.openisms.api.Company]] = field(_.company)((c_, f_) => c_.copy(company = f_))
    def focus: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.focus)((c_, f_) => c_.copy(focus = f_))
    def passed: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.passed)((c_, f_) => c_.copy(passed = f_))
    def result: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.result)((c_, f_) => c_.copy(result = f_))
    def url: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.url)((c_, f_) => c_.copy(url = f_))
    def contacts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.openisms.api.Person]] = field(_.contacts)((c_, f_) => c_.copy(contacts = f_))
    def tags: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.tags)((c_, f_) => c_.copy(tags = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val BEGIN_FIELD_NUMBER = 2
  final val END_FIELD_NUMBER = 3
  final val COMPANY_FIELD_NUMBER = 4
  final val FOCUS_FIELD_NUMBER = 5
  final val PASSED_FIELD_NUMBER = 6
  final val RESULT_FIELD_NUMBER = 7
  final val URL_FIELD_NUMBER = 8
  final val CONTACTS_FIELD_NUMBER = 9
  final val TAGS_FIELD_NUMBER = 10
  def of(
    id: _root_.scala.Predef.String,
    begin: _root_.scala.Option[io.openisms.api.Date],
    end: _root_.scala.Option[io.openisms.api.Date],
    company: _root_.scala.Option[io.openisms.api.Company],
    focus: _root_.scala.Predef.String,
    passed: _root_.scala.Boolean,
    result: _root_.scala.Predef.String,
    url: _root_.scala.Predef.String,
    contacts: _root_.scala.Seq[io.openisms.api.Person],
    tags: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.io.openisms.api.Pentest = _root_.io.openisms.api.Pentest(
    id,
    begin,
    end,
    company,
    focus,
    passed,
    result,
    url,
    contacts,
    tags
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.openisms.v1.Pentest])
}
