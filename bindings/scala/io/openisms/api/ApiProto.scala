// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.openisms.api

object ApiProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.timestamp.TimestampProto,
    com.google.protobuf.wrappers.WrappersProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      io.openisms.api.Event,
      io.openisms.api.Meta,
      io.openisms.api.SourceSystem,
      io.openisms.api.User,
      io.openisms.api.Person,
      io.openisms.api.Name,
      io.openisms.api.Photo,
      io.openisms.api.Employment,
      io.openisms.api.ConnectedAccount,
      io.openisms.api.PhysicalObject,
      io.openisms.api.SecurityFeatures,
      io.openisms.api.Network,
      io.openisms.api.OperatingSystem,
      io.openisms.api.Application,
      io.openisms.api.Profile,
      io.openisms.api.Date,
      io.openisms.api.Certification,
      io.openisms.api.Company,
      io.openisms.api.Pentest,
      io.openisms.api.Repository,
      io.openisms.api.Statistics
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChVpby9vcGVuaXNtcy9hcGkucHJvdG8SDmlvLm9wZW5pc21zLnYxGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvG
  h5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8iqgQKBUV2ZW50EjMKBG1ldGEYASABKAsyFC5pby5vcGVuaXNtcy52MS5NZ
  XRhQgniPwYSBG1ldGFSBG1ldGESQQoGc291cmNlGAIgASgLMhwuaW8ub3BlbmlzbXMudjEuU291cmNlU3lzdGVtQgviPwgSBnNvd
  XJjZVIGc291cmNlEjYKBXVzZXJzGAMgAygLMhQuaW8ub3BlbmlzbXMudjEuVXNlckIK4j8HEgV1c2Vyc1IFdXNlcnMSRgoHZGV2a
  WNlcxgEIAMoCzIeLmlvLm9wZW5pc21zLnYxLlBoeXNpY2FsT2JqZWN0QgziPwkSB2RldmljZXNSB2RldmljZXMSUQoMcmVwb3Npd
  G9yaWVzGAcgAygLMhouaW8ub3BlbmlzbXMudjEuUmVwb3NpdG9yeUIR4j8OEgxyZXBvc2l0b3JpZXNSDHJlcG9zaXRvcmllcxJXC
  g1jZXJ0aWZpY2F0aW9uGAkgAygLMh0uaW8ub3BlbmlzbXMudjEuQ2VydGlmaWNhdGlvbkIS4j8PEg1jZXJ0aWZpY2F0aW9uUg1jZ
  XJ0aWZpY2F0aW9uEj8KB3BlbnRlc3QYCyADKAsyFy5pby5vcGVuaXNtcy52MS5QZW50ZXN0QgziPwkSB3BlbnRlc3RSB3BlbnRlc
  3QSPAoFc3RhdHMYDSADKAsyGi5pby5vcGVuaXNtcy52MS5TdGF0aXN0aWNzQgriPwcSBXN0YXRzUgVzdGF0cyKaAQoETWV0YRJCC
  gdjcmVhdGVkGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIM4j8JEgdjcmVhdGVkUgdjcmVhdGVkEi8KCmlkZW50a
  WZpZXIYAiABKAlCD+I/DBIKaWRlbnRpZmllclIKaWRlbnRpZmllchIdCgRldGFnGAMgASgJQgniPwYSBGV0YWdSBGV0YWcingcKD
  FNvdXJjZVN5c3RlbRIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSIwoGdmVuZG9yGAIgASgJQgviPwgSBnZlbmRvclIGd
  mVuZG9yEhoKA3VybBgDIAEoCUII4j8FEgN1cmxSA3VybBInCghsb2dvX3VybBgEIAEoCUIM4j8JEgdsb2dvVXJsUgdsb2dvVXJsE
  kYKBHR5cGUYBSABKA4yJy5pby5vcGVuaXNtcy52MS5Tb3VyY2VTeXN0ZW0uU291cmNlVHlwZUIJ4j8GEgR0eXBlUgR0eXBlIrwFC
  gpTb3VyY2VUeXBlEh0KCXVuZGVmaW5lZBAAGg7iPwsSCXVuZGVmaW5lZBItChFpZGVudGl0eV9wcm92aWRlchABGhbiPxMSEWlkZ
  W50aXR5X3Byb3ZpZGVyEj0KGXNvdXJjZV9jb250cm9sX21hbmFnZW1lbnQQAhoe4j8bEhlzb3VyY2VfY29udHJvbF9tYW5hZ2VtZ
  W50EicKDmNsb3VkX3Byb3ZpZGVyEAMaE+I/EBIOY2xvdWRfcHJvdmlkZXISGwoIZGF0YWJhc2UQBBoN4j8KEghkYXRhYmFzZRIZC
  gduZXR3b3JrEAUaDOI/CRIHbmV0d29yaxItChFkZXZpY2VfbWFuYWdlbWVudBAKGhbiPxMSEWRldmljZV9tYW5hZ2VtZW50Ei0KE
  XNlY3VyaXR5X3NvZnR3YXJlEAsaFuI/ExIRc2VjdXJpdHlfc29mdHdhcmUSKwoQcGFzc3dvcmRfbWFuYWdlchAMGhXiPxISEHBhc
  3N3b3JkX21hbmFnZXISJQoNY29tbXVuaWNhdGlvbhAUGhLiPw8SDWNvbW11bmljYXRpb24SKQoPaHVtYW5fcmVzb3VyY2VzEBUaF
  OI/ERIPaHVtYW5fcmVzb3VyY2VzEj0KGWNvbnRlbnRfbWFuYWdlbWVudF9zeXN0ZW0QFhoe4j8bEhljb250ZW50X21hbmFnZW1lb
  nRfc3lzdGVtEh0KCXRpY2tldGluZxAXGg7iPwsSCXRpY2tldGluZxJLCiBjdXN0b21lcl9yZWxhdGlvbnNoaXBfbWFuYWdlbWVud
  BAYGiXiPyISIGN1c3RvbWVyX3JlbGF0aW9uc2hpcF9tYW5hZ2VtZW50EhkKB2ZpbmFuY2UQGRoM4j8JEgdmaW5hbmNlEh0KCWFuY
  Wx5dGljcxAaGg7iPwsSCWFuYWx5dGljcyKsBwoEVXNlchI7CgZwZXJzb24YASABKAsyFi5pby5vcGVuaXNtcy52MS5QZXJzb25CC
  +I/CBIGcGVyc29uUgZwZXJzb24SZQoUc2Vjb25kX2ZhY3Rvcl9hY3RpdmUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhb
  HVlQhfiPxQSEnNlY29uZEZhY3RvckFjdGl2ZVISc2Vjb25kRmFjdG9yQWN0aXZlEmsKFnNlY29uZF9mYWN0b3JfZW5mb3JjZWQYB
  iABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlQhniPxYSFHNlY29uZEZhY3RvckVuZm9yY2VkUhRzZWNvbmRGYWN0b3JFb
  mZvcmNlZBI/CgZhY3RpdmUYByABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlQgviPwgSBmFjdGl2ZVIGYWN0aXZlEkgKC
  XN1c3BlbmRlZBgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVCDuI/CxIJc3VzcGVuZGVkUglzdXNwZW5kZWQSRQoIZ
  GlzYWJsZWQYCSABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlQg3iPwoSCGRpc2FibGVkUghkaXNhYmxlZBJCCgdkZWxld
  GVkGAogASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZUIM4j8JEgdkZWxldGVkUgdkZWxldGVkEiMKBmdyb3VwcxgPIAMoC
  UIL4j8IEgZncm91cHNSBmdyb3VwcxIvCgpwcml2aWxlZ2VzGBAgAygJQg/iPwwSCnByaXZpbGVnZXNSCnByaXZpbGVnZXMSSwoKZ
  W1wbG95bWVudBgUIAEoCzIaLmlvLm9wZW5pc21zLnYxLkVtcGxveW1lbnRCD+I/DBIKZW1wbG95bWVudFIKZW1wbG95bWVudBJnC
  hJjb25uZWN0ZWRfYWNjb3VudHMYFSADKAsyIC5pby5vcGVuaXNtcy52MS5Db25uZWN0ZWRBY2NvdW50QhbiPxMSEWNvbm5lY3RlZ
  EFjY291bnRzUhFjb25uZWN0ZWRBY2NvdW50cxJSCgtwb3NzZXNzaW9ucxgWIAMoCzIeLmlvLm9wZW5pc21zLnYxLlBoeXNpY2FsT
  2JqZWN0QhDiPw0SC3Bvc3Nlc3Npb25zUgtwb3NzZXNzaW9ucxIdCgR0YWdzGCggAygJQgniPwYSBHRhZ3NSBHRhZ3MisgMKBlBlc
  nNvbhIXCgJpZBgBIAEoCUIH4j8EEgJpZFICaWQSMwoEbmFtZRgCIAEoCzIULmlvLm9wZW5pc21zLnYxLk5hbWVCCeI/BhIEbmFtZ
  VIEbmFtZRI2Cg1wcmltYXJ5X2VtYWlsGAMgASgJQhHiPw4SDHByaW1hcnlFbWFpbFIMcHJpbWFyeUVtYWlsEjMKDG90aGVyX2VtY
  WlscxgEIAMoCUIQ4j8NEgtvdGhlckVtYWlsc1ILb3RoZXJFbWFpbHMSPQoHcGljdHVyZRgFIAEoCzIVLmlvLm9wZW5pc21zLnYxL
  lBob3RvQgziPwkSB3BpY3R1cmVSB3BpY3R1cmUSJgoHY29tcGFueRgGIAEoCUIM4j8JEgdjb21wYW55Ugdjb21wYW55EkIKB2NyZ
  WF0ZWQYCiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgziPwkSB2NyZWF0ZWRSB2NyZWF0ZWQSQgoHdXBkYXRlZBgLI
  AEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCDOI/CRIHdXBkYXRlZFIHdXBkYXRlZCL/AQoETmFtZRItCgpnaXZlbl9uY
  W1lGAEgASgJQg7iPwsSCWdpdmVuTmFtZVIJZ2l2ZW5OYW1lEjAKC2ZhbWlseV9uYW1lGAIgASgJQg/iPwwSCmZhbWlseU5hbWVSC
  mZhbWlseU5hbWUSKgoJZnVsbF9uYW1lGAMgASgJQg3iPwoSCGZ1bGxOYW1lUghmdWxsTmFtZRIgCgV0aXRsZRgEIAEoCUIK4j8HE
  gV0aXRsZVIFdGl0bGUSKQoIcG9zaXRpb24YBSABKAlCDeI/ChIIcG9zaXRpb25SCHBvc2l0aW9uEh0KBHJvbGUYBiABKAlCCeI/B
  hIEcm9sZVIEcm9sZSL+AQoFUGhvdG8SGgoDdXJsGAEgASgJQgjiPwUSA3VybFIDdXJsEjoKD2Jhc2VfNjRfZW5jb2RlZBgCIAEoC
  UIS4j8PEg1iYXNlNjRFbmNvZGVkUg1iYXNlNjRFbmNvZGVkEioKCW1pbWVfdHlwZRgDIAEoCUIN4j8KEghtaW1lVHlwZVIIbWltZ
  VR5cGUSHQoEZXRhZxgEIAEoCUIJ4j8GEgRldGFnUgRldGFnElIKDWxhc3RfbW9kaWZpZWQYBSABKAsyGi5nb29nbGUucHJvdG9id
  WYuVGltZXN0YW1wQhHiPw4SDGxhc3RNb2RpZmllZFIMbGFzdE1vZGlmaWVkIsYBCgpFbXBsb3ltZW50EikKCGNvbnRyYWN0GAEgA
  SgJQg3iPwoSCGNvbnRyYWN0Ughjb250cmFjdBIjCgZzdGF0dXMYAiABKAlCC+I/CBIGc3RhdHVzUgZzdGF0dXMSNgoFYmVnaW4YA
  yABKAsyFC5pby5vcGVuaXNtcy52MS5EYXRlQgriPwcSBWJlZ2luUgViZWdpbhIwCgNlbmQYBCABKAsyFC5pby5vcGVuaXNtcy52M
  S5EYXRlQgjiPwUSA2VuZFIDZW5kIvgBChBDb25uZWN0ZWRBY2NvdW50EiEKBmFwcF9pZBgBIAEoCUIK4j8HEgVhcHBJZFIFYXBwS
  WQSJwoIYXBwX25hbWUYAiABKAlCDOI/CRIHYXBwTmFtZVIHYXBwTmFtZRInCghhcHBfdHlwZRgDIAEoCUIM4j8JEgdhcHBUeXBlU
  gdhcHBUeXBlEiQKB2FwcF91cmwYBCABKAlCC+I/CBIGYXBwVXJsUgZhcHBVcmwSJAoHdXNlcl9pZBgFIAEoCUIL4j8IEgZ1c2VyS
  WRSBnVzZXJJZBIjCgZzY29wZXMYBiADKAlCC+I/CBIGc2NvcGVzUgZzY29wZXMingYKDlBoeXNpY2FsT2JqZWN0Eh0KBHR5cGUYA
  SABKAlCCeI/BhIEdHlwZVIEdHlwZRIdCgRuYW1lGAIgASgJQgniPwYSBG5hbWVSBG5hbWUSNQoMbWFudWZhY3R1cmVyGAMgASgJQ
  hHiPw4SDG1hbnVmYWN0dXJlclIMbWFudWZhY3R1cmVyEiMKBnZlbmRvchgEIAEoCUIL4j8IEgZ2ZW5kb3JSBnZlbmRvchIvCgppZ
  GVudGlmaWVyGAUgASgJQg/iPwwSCmlkZW50aWZpZXJSCmlkZW50aWZpZXISNgoNc2VyaWFsX251bWJlchgGIAEoCUIR4j8OEgxzZ
  XJpYWxOdW1iZXJSDHNlcmlhbE51bWJlchIdCgRpbWVpGAcgASgJQgniPwYSBGltZWlSBGltZWkSHQoEbWVpZBgIIAEoCUIJ4j8GE
  gRtZWlkUgRtZWlkEkIKCG5ldHdvcmtzGAkgAygLMhcuaW8ub3BlbmlzbXMudjEuTmV0d29ya0IN4j8KEghuZXR3b3Jrc1IIbmV0d
  29ya3MSKQoIaG9zdG5hbWUYCiABKAlCDeI/ChIIaG9zdG5hbWVSCGhvc3RuYW1lEjYKDXVzZXJfYWNjb3VudHMYCyADKAlCEeI/D
  hIMdXNlckFjY291bnRzUgx1c2VyQWNjb3VudHMSOAoCb3MYDCABKAsyHy5pby5vcGVuaXNtcy52MS5PcGVyYXRpbmdTeXN0ZW1CB
  +I/BBICb3NSAm9zEksKCHNlY3VyaXR5GA0gASgLMiAuaW8ub3BlbmlzbXMudjEuU2VjdXJpdHlGZWF0dXJlc0IN4j8KEghzZWN1c
  ml0eVIIc2VjdXJpdHkSQgoIcHJvZmlsZXMYDiADKAsyFy5pby5vcGVuaXNtcy52MS5Qcm9maWxlQg3iPwoSCHByb2ZpbGVzUghwc
  m9maWxlcxI6CgRhcHBzGA8gAygLMhsuaW8ub3BlbmlzbXMudjEuQXBwbGljYXRpb25CCeI/BhIEYXBwc1IEYXBwcxIdCgR0YWdzG
  BQgAygJQgniPwYSBHRhZ3NSBHRhZ3MiywYKEFNlY3VyaXR5RmVhdHVyZXMSWAoPYWN0aXZhdGlvbl9sb2NrGAEgASgLMhouZ29vZ
  2xlLnByb3RvYnVmLkJvb2xWYWx1ZUIT4j8QEg5hY3RpdmF0aW9uTG9ja1IOYWN0aXZhdGlvbkxvY2sSSwoKc3VwZXJ2aXNlZBgCI
  AEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVCD+I/DBIKc3VwZXJ2aXNlZFIKc3VwZXJ2aXNlZBJJCgpmaWxlX3ZhdWx0G
  AMgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZUIO4j8LEglmaWxlVmF1bHRSCWZpbGVWYXVsdBJlChRmdWxsX2Rpc2tfZ
  W5jcnlwdGlvbhgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVCF+I/FBISZnVsbERpc2tFbmNyeXB0aW9uUhJmdWxsR
  Glza0VuY3J5cHRpb24SWAoPc2VjdXJlX3Bhc3N3b3JkGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZUIT4j8QEg5zZ
  WN1cmVQYXNzd29yZFIOc2VjdXJlUGFzc3dvcmQSaAoVYXV0b21hdGljX3NjcmVlbl9sb2NrGAYgASgLMhouZ29vZ2xlLnByb3RvY
  nVmLkJvb2xWYWx1ZUIY4j8VEhNhdXRvbWF0aWNTY3JlZW5Mb2NrUhNhdXRvbWF0aWNTY3JlZW5Mb2NrEl0KEXNjcmVlbl9sb2NrX
  2FmdGVyGAcgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWVCFOI/ERIPc2NyZWVuTG9ja0FmdGVyUg9zY3JlZW5Mb2NrQ
  WZ0ZXISWwoQZmlyZXdhbGxfZW5hYmxlZBgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVCFOI/ERIPZmlyZXdhbGxFb
  mFibGVkUg9maXJld2FsbEVuYWJsZWQSXgoRYXV0b21hdGljX3VwZGF0ZXMYCSABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhb
  HVlQhXiPxISEGF1dG9tYXRpY1VwZGF0ZXNSEGF1dG9tYXRpY1VwZGF0ZXMieQoHTmV0d29yaxIdCgRuYW1lGAEgASgJQgniPwYSB
  G5hbWVSBG5hbWUSHQoEdHlwZRgCIAEoCUIJ4j8GEgR0eXBlUgR0eXBlEjAKC21hY19hZGRyZXNzGAMgASgJQg/iPwwSCm1hY0FkZ
  HJlc3NSCm1hY0FkZHJlc3Mi0gMKD09wZXJhdGluZ1N5c3RlbRJJCgJvcxgBIAEoDjIwLmlvLm9wZW5pc21zLnYxLk9wZXJhdGluZ
  1N5c3RlbS5PcGVyYXRpbmdTeXN0ZW1zQgfiPwQSAm9zUgJvcxI2Cg1tYWpvcl92ZXJzaW9uGAIgASgJQhHiPw4SDG1ham9yVmVyc
  2lvblIMbWFqb3JWZXJzaW9uEjMKDGZ1bGxfdmVyc2lvbhgDIAEoCUIQ4j8NEgtmdWxsVmVyc2lvblILZnVsbFZlcnNpb24ihgIKE
  E9wZXJhdGluZ1N5c3RlbXMSHQoJdW5kZWZpbmVkEAAaDuI/CxIJdW5kZWZpbmVkEhUKBW1hY29zEAEaCuI/BxIFbWFjb3MSGQoHd
  2luZG93cxACGgziPwkSB3dpbmRvd3MSFQoFbGludXgQAxoK4j8HEgVsaW51eBITCgR1bml4EAQaCeI/BhIEdW5peBIdCgljaHJvb
  WVfb3MQBRoO4j8LEgljaHJvbWVfb3MSEQoDaW9zEAoaCOI/BRIDaW9zEhkKB2FuZHJvaWQQCxoM4j8JEgdhbmRyb2lkEhEKA3Jvc
  xAOGgjiPwUSA3JvcxIVCgVvdGhlchAPGgriPwcSBW90aGVyIr4DCgtBcHBsaWNhdGlvbhIdCgRuYW1lGAEgASgJQgniPwYSBG5hb
  WVSBG5hbWUSHQoEcGF0aBgCIAEoCUIJ4j8GEgRwYXRoUgRwYXRoEiMKBnZlbmRvchgDIAEoCUIL4j8IEgZ2ZW5kb3JSBnZlbmRvc
  hIaCgN1cmwYBCABKAlCCOI/BRIDdXJsUgN1cmwSMgoLZGVzY3JpcHRpb24YBSABKAlCEOI/DRILZGVzY3JpcHRpb25SC2Rlc2Nya
  XB0aW9uEiYKB3ZlcnNpb24YBiABKAlCDOI/CRIHdmVyc2lvblIHdmVyc2lvbhI/CgZzaWduZWQYByABKAsyGi5nb29nbGUucHJvd
  G9idWYuQm9vbFZhbHVlQgviPwgSBnNpZ25lZFIGc2lnbmVkEkkKCnN5c3RlbV9hcHAYCCABKAsyGi5nb29nbGUucHJvdG9idWYuQ
  m9vbFZhbHVlQg7iPwsSCXN5c3RlbUFwcFIJc3lzdGVtQXBwEkgKE2luc3RhbGxhdGlvbl9zb3VyY2UYCSABKAlCF+I/FBISaW5zd
  GFsbGF0aW9uU291cmNlUhJpbnN0YWxsYXRpb25Tb3VyY2UirwIKB1Byb2ZpbGUSHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuY
  W1lEi8KCmlkZW50aWZpZXIYAiABKAlCD+I/DBIKaWRlbnRpZmllclIKaWRlbnRpZmllchJYCg9yZW1vdmFsX2FsbG93ZWQYAyABK
  AsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlQhPiPxASDnJlbW92YWxBbGxvd2VkUg5yZW1vdmFsQWxsb3dlZBIzCgxwYXlsb
  2FkX3R5cGUYBCABKAlCEOI/DRILcGF5bG9hZFR5cGVSC3BheWxvYWRUeXBlEkUKEnBheWxvYWRfaWRlbnRpZmllchgFIAEoCUIW4
  j8TEhFwYXlsb2FkSWRlbnRpZmllclIRcGF5bG9hZElkZW50aWZpZXIiYwoERGF0ZRIdCgR5ZWFyGAEgASgFQgniPwYSBHllYXJSB
  HllYXISIAoFbW9udGgYAiABKAVCCuI/BxIFbW9udGhSBW1vbnRoEhoKA2RheRgDIAEoBUII4j8FEgNkYXlSA2RheSJpCg1DZXJ0a
  WZpY2F0aW9uEh0KBHR5cGUYASABKAlCCeI/BhIEdHlwZVIEdHlwZRIaCgN1cmwYAiABKAlCCOI/BRIDdXJsUgN1cmwSHQoEdGFnc
  xgKIAMoCUIJ4j8GEgR0YWdzUgR0YWdzItcBCgdDb21wYW55Eh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRIaCgN1cmwYA
  iABKAlCCOI/BRIDdXJsUgN1cmwSKQoIY2F0ZWdvcnkYAyABKAlCDeI/ChIIY2F0ZWdvcnlSCGNhdGVnb3J5Ej4KB2NvbnRhY3QYB
  CABKAsyFi5pby5vcGVuaXNtcy52MS5QZXJzb25CDOI/CRIHY29udGFjdFIHY29udGFjdBImCgdhZGRyZXNzGAUgAygJQgziPwkSB
  2FkZHJlc3NSB2FkZHJlc3MitwMKB1BlbnRlc3QSFwoCaWQYASABKAlCB+I/BBICaWRSAmlkEjYKBWJlZ2luGAIgASgLMhQuaW8ub
  3BlbmlzbXMudjEuRGF0ZUIK4j8HEgViZWdpblIFYmVnaW4SMAoDZW5kGAMgASgLMhQuaW8ub3BlbmlzbXMudjEuRGF0ZUII4j8FE
  gNlbmRSA2VuZBI/Cgdjb21wYW55GAQgASgLMhcuaW8ub3BlbmlzbXMudjEuQ29tcGFueUIM4j8JEgdjb21wYW55Ugdjb21wYW55E
  iAKBWZvY3VzGAUgASgJQgriPwcSBWZvY3VzUgVmb2N1cxIjCgZwYXNzZWQYBiABKAhCC+I/CBIGcGFzc2VkUgZwYXNzZWQSIwoGc
  mVzdWx0GAcgASgJQgviPwgSBnJlc3VsdFIGcmVzdWx0EhoKA3VybBgIIAEoCUII4j8FEgN1cmxSA3VybBJBCghjb250YWN0cxgJI
  AMoCzIWLmlvLm9wZW5pc21zLnYxLlBlcnNvbkIN4j8KEghjb250YWN0c1IIY29udGFjdHMSHQoEdGFncxgKIAMoCUIJ4j8GEgR0Y
  WdzUgR0YWdzIvECCgpSZXBvc2l0b3J5Eh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRIaCgN1cmwYAiABKAlCCOI/BRIDd
  XJsUgN1cmwSMgoLZGVzY3JpcHRpb24YAyABKAlCEOI/DRILZGVzY3JpcHRpb25SC2Rlc2NyaXB0aW9uEksKCnZpc2liaWxpdHkYB
  CABKA4yGi5pby5vcGVuaXNtcy52MS5WaXNpYmlsaXR5Qg/iPwwSCnZpc2liaWxpdHlSCnZpc2liaWxpdHkSPgoHbWVtYmVycxgFI
  AMoCzIWLmlvLm9wZW5pc21zLnYxLlBlcnNvbkIM4j8JEgdtZW1iZXJzUgdtZW1iZXJzEkgKE3NlY3VyaXR5X2F0dHJpYnV0ZXMYB
  iADKAlCF+I/FBISc2VjdXJpdHlBdHRyaWJ1dGVzUhJzZWN1cml0eUF0dHJpYnV0ZXMSHQoEdGFncxgKIAMoCUIJ4j8GEgR0YWdzU
  gR0YWdzIqYBCgpTdGF0aXN0aWNzEi8KCmlkZW50aWZpZXIYASABKAlCD+I/DBIKaWRlbnRpZmllclIKaWRlbnRpZmllchIdCgRuY
  W1lGAIgASgJQgniPwYSBG5hbWVSBG5hbWUSIAoFdmFsdWUYAyABKAVCCuI/BxIFdmFsdWVSBXZhbHVlEiYKB2NvbW1lbnQYBCABK
  AlCDOI/CRIHY29tbWVudFIHY29tbWVudCqGAQoKVmlzaWJpbGl0eRIdCgl1bmRlZmluZWQQABoO4j8LEgl1bmRlZmluZWQSFwoGc
  HVibGljEAEaC+I/CBIGcHVibGljEhsKCGludGVybmFsEAIaDeI/ChIIaW50ZXJuYWwSIwoMY29uZmlkZW50aWFsEAMaEeI/DhIMY
  29uZmlkZW50aWFsQiYKC2lvLm9wZW5pc21zWhdnaXRodWIuY29tL29wZW5pc21zL2FwaWIGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.protobuf.wrappers.WrappersProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}