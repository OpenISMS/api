// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.openisms.api

object ApiProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.timestamp.TimestampProto,
    com.google.protobuf.wrappers.WrappersProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      io.openisms.api.Event,
      io.openisms.api.Meta,
      io.openisms.api.SourceSystem,
      io.openisms.api.User,
      io.openisms.api.Person,
      io.openisms.api.Name,
      io.openisms.api.UrlWithEtag,
      io.openisms.api.Employment,
      io.openisms.api.ConnectedAccount,
      io.openisms.api.PhysicalObject,
      io.openisms.api.SecurityFeatures,
      io.openisms.api.Network,
      io.openisms.api.OperatingSystem,
      io.openisms.api.Application,
      io.openisms.api.Profile,
      io.openisms.api.Date,
      io.openisms.api.Certification,
      io.openisms.api.Company,
      io.openisms.api.Pentest,
      io.openisms.api.Repository,
      io.openisms.api.Statistics
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """ChVpby9vcGVuaXNtcy9hcGkucHJvdG8SDmlvLm9wZW5pc21zLnYxGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvG
  h5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8iqgQKBUV2ZW50EjMKBG1ldGEYASABKAsyFC5pby5vcGVuaXNtcy52MS5NZ
  XRhQgniPwYSBG1ldGFSBG1ldGESQQoGc291cmNlGAIgASgLMhwuaW8ub3BlbmlzbXMudjEuU291cmNlU3lzdGVtQgviPwgSBnNvd
  XJjZVIGc291cmNlEjYKBXVzZXJzGAMgAygLMhQuaW8ub3BlbmlzbXMudjEuVXNlckIK4j8HEgV1c2Vyc1IFdXNlcnMSRgoHZGV2a
  WNlcxgEIAMoCzIeLmlvLm9wZW5pc21zLnYxLlBoeXNpY2FsT2JqZWN0QgziPwkSB2RldmljZXNSB2RldmljZXMSUQoMcmVwb3Npd
  G9yaWVzGAcgAygLMhouaW8ub3BlbmlzbXMudjEuUmVwb3NpdG9yeUIR4j8OEgxyZXBvc2l0b3JpZXNSDHJlcG9zaXRvcmllcxJXC
  g1jZXJ0aWZpY2F0aW9uGAkgAygLMh0uaW8ub3BlbmlzbXMudjEuQ2VydGlmaWNhdGlvbkIS4j8PEg1jZXJ0aWZpY2F0aW9uUg1jZ
  XJ0aWZpY2F0aW9uEj8KB3BlbnRlc3QYCyADKAsyFy5pby5vcGVuaXNtcy52MS5QZW50ZXN0QgziPwkSB3BlbnRlc3RSB3BlbnRlc
  3QSPAoFc3RhdHMYDSADKAsyGi5pby5vcGVuaXNtcy52MS5TdGF0aXN0aWNzQgriPwcSBXN0YXRzUgVzdGF0cyKaAQoETWV0YRJCC
  gdjcmVhdGVkGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIM4j8JEgdjcmVhdGVkUgdjcmVhdGVkEi8KCmlkZW50a
  WZpZXIYAiABKAlCD+I/DBIKaWRlbnRpZmllclIKaWRlbnRpZmllchIdCgRldGFnGAMgASgJQgniPwYSBGV0YWdSBGV0YWcingcKD
  FNvdXJjZVN5c3RlbRIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSIwoGdmVuZG9yGAIgASgJQgviPwgSBnZlbmRvclIGd
  mVuZG9yEhoKA3VybBgDIAEoCUII4j8FEgN1cmxSA3VybBInCghsb2dvX3VybBgEIAEoCUIM4j8JEgdsb2dvVXJsUgdsb2dvVXJsE
  kYKBHR5cGUYBSABKA4yJy5pby5vcGVuaXNtcy52MS5Tb3VyY2VTeXN0ZW0uU291cmNlVHlwZUIJ4j8GEgR0eXBlUgR0eXBlIrwFC
  gpTb3VyY2VUeXBlEh0KCXVuZGVmaW5lZBAAGg7iPwsSCXVuZGVmaW5lZBItChFpZGVudGl0eV9wcm92aWRlchABGhbiPxMSEWlkZ
  W50aXR5X3Byb3ZpZGVyEj0KGXNvdXJjZV9jb250cm9sX21hbmFnZW1lbnQQAhoe4j8bEhlzb3VyY2VfY29udHJvbF9tYW5hZ2VtZ
  W50EicKDmNsb3VkX3Byb3ZpZGVyEAMaE+I/EBIOY2xvdWRfcHJvdmlkZXISGwoIZGF0YWJhc2UQBBoN4j8KEghkYXRhYmFzZRIZC
  gduZXR3b3JrEAUaDOI/CRIHbmV0d29yaxItChFkZXZpY2VfbWFuYWdlbWVudBAKGhbiPxMSEWRldmljZV9tYW5hZ2VtZW50Ei0KE
  XNlY3VyaXR5X3NvZnR3YXJlEAsaFuI/ExIRc2VjdXJpdHlfc29mdHdhcmUSKwoQcGFzc3dvcmRfbWFuYWdlchAMGhXiPxISEHBhc
  3N3b3JkX21hbmFnZXISJQoNY29tbXVuaWNhdGlvbhAUGhLiPw8SDWNvbW11bmljYXRpb24SKQoPaHVtYW5fcmVzb3VyY2VzEBUaF
  OI/ERIPaHVtYW5fcmVzb3VyY2VzEj0KGWNvbnRlbnRfbWFuYWdlbWVudF9zeXN0ZW0QFhoe4j8bEhljb250ZW50X21hbmFnZW1lb
  nRfc3lzdGVtEh0KCXRpY2tldGluZxAXGg7iPwsSCXRpY2tldGluZxJLCiBjdXN0b21lcl9yZWxhdGlvbnNoaXBfbWFuYWdlbWVud
  BAYGiXiPyISIGN1c3RvbWVyX3JlbGF0aW9uc2hpcF9tYW5hZ2VtZW50EhkKB2ZpbmFuY2UQGRoM4j8JEgdmaW5hbmNlEh0KCWFuY
  Wx5dGljcxAaGg7iPwsSCWFuYWx5dGljcyKsBwoEVXNlchI7CgZwZXJzb24YASABKAsyFi5pby5vcGVuaXNtcy52MS5QZXJzb25CC
  +I/CBIGcGVyc29uUgZwZXJzb24SZQoUc2Vjb25kX2ZhY3Rvcl9hY3RpdmUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhb
  HVlQhfiPxQSEnNlY29uZEZhY3RvckFjdGl2ZVISc2Vjb25kRmFjdG9yQWN0aXZlEmsKFnNlY29uZF9mYWN0b3JfZW5mb3JjZWQYB
  iABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlQhniPxYSFHNlY29uZEZhY3RvckVuZm9yY2VkUhRzZWNvbmRGYWN0b3JFb
  mZvcmNlZBI/CgZhY3RpdmUYByABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlQgviPwgSBmFjdGl2ZVIGYWN0aXZlEkgKC
  XN1c3BlbmRlZBgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVCDuI/CxIJc3VzcGVuZGVkUglzdXNwZW5kZWQSRQoIZ
  GlzYWJsZWQYCSABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlQg3iPwoSCGRpc2FibGVkUghkaXNhYmxlZBJCCgdkZWxld
  GVkGAogASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZUIM4j8JEgdkZWxldGVkUgdkZWxldGVkEiMKBmdyb3VwcxgPIAMoC
  UIL4j8IEgZncm91cHNSBmdyb3VwcxIvCgpwcml2aWxlZ2VzGBAgAygJQg/iPwwSCnByaXZpbGVnZXNSCnByaXZpbGVnZXMSSwoKZ
  W1wbG95bWVudBgUIAEoCzIaLmlvLm9wZW5pc21zLnYxLkVtcGxveW1lbnRCD+I/DBIKZW1wbG95bWVudFIKZW1wbG95bWVudBJnC
  hJjb25uZWN0ZWRfYWNjb3VudHMYFSADKAsyIC5pby5vcGVuaXNtcy52MS5Db25uZWN0ZWRBY2NvdW50QhbiPxMSEWNvbm5lY3RlZ
  EFjY291bnRzUhFjb25uZWN0ZWRBY2NvdW50cxJSCgtwb3NzZXNzaW9ucxgWIAMoCzIeLmlvLm9wZW5pc21zLnYxLlBoeXNpY2FsT
  2JqZWN0QhDiPw0SC3Bvc3Nlc3Npb25zUgtwb3NzZXNzaW9ucxIdCgR0YWdzGCggAygJQgniPwYSBHRhZ3NSBHRhZ3MiuAMKBlBlc
  nNvbhIXCgJpZBgBIAEoCUIH4j8EEgJpZFICaWQSMwoEbmFtZRgCIAEoCzIULmlvLm9wZW5pc21zLnYxLk5hbWVCCeI/BhIEbmFtZ
  VIEbmFtZRI2Cg1wcmltYXJ5X2VtYWlsGAMgASgJQhHiPw4SDHByaW1hcnlFbWFpbFIMcHJpbWFyeUVtYWlsEjMKDG90aGVyX2VtY
  WlscxgEIAMoCUIQ4j8NEgtvdGhlckVtYWlsc1ILb3RoZXJFbWFpbHMSQwoHcGljdHVyZRgFIAEoCzIbLmlvLm9wZW5pc21zLnYxL
  lVybFdpdGhFdGFnQgziPwkSB3BpY3R1cmVSB3BpY3R1cmUSJgoHY29tcGFueRgGIAEoCUIM4j8JEgdjb21wYW55Ugdjb21wYW55E
  kIKB2NyZWF0ZWQYCiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgziPwkSB2NyZWF0ZWRSB2NyZWF0ZWQSQgoHdXBkY
  XRlZBgLIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCDOI/CRIHdXBkYXRlZFIHdXBkYXRlZCL/AQoETmFtZRItCgpna
  XZlbl9uYW1lGAEgASgJQg7iPwsSCWdpdmVuTmFtZVIJZ2l2ZW5OYW1lEjAKC2ZhbWlseV9uYW1lGAIgASgJQg/iPwwSCmZhbWlse
  U5hbWVSCmZhbWlseU5hbWUSKgoJZnVsbF9uYW1lGAMgASgJQg3iPwoSCGZ1bGxOYW1lUghmdWxsTmFtZRIgCgV0aXRsZRgEIAEoC
  UIK4j8HEgV0aXRsZVIFdGl0bGUSKQoIcG9zaXRpb24YBSABKAlCDeI/ChIIcG9zaXRpb25SCHBvc2l0aW9uEh0KBHJvbGUYBiABK
  AlCCeI/BhIEcm9sZVIEcm9sZSKcAQoLVXJsV2l0aEV0YWcSGgoDdXJsGAEgASgJQgjiPwUSA3VybFIDdXJsEh0KBGV0YWcYAiABK
  AlCCeI/BhIEZXRhZ1IEZXRhZxJSCg1sYXN0X21vZGlmaWVkGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIR4j8OE
  gxsYXN0TW9kaWZpZWRSDGxhc3RNb2RpZmllZCLGAQoKRW1wbG95bWVudBIpCghjb250cmFjdBgBIAEoCUIN4j8KEghjb250cmFjd
  FIIY29udHJhY3QSIwoGc3RhdHVzGAIgASgJQgviPwgSBnN0YXR1c1IGc3RhdHVzEjYKBWJlZ2luGAMgASgLMhQuaW8ub3Blbmlzb
  XMudjEuRGF0ZUIK4j8HEgViZWdpblIFYmVnaW4SMAoDZW5kGAQgASgLMhQuaW8ub3BlbmlzbXMudjEuRGF0ZUII4j8FEgNlbmRSA
  2VuZCL4AQoQQ29ubmVjdGVkQWNjb3VudBIhCgZhcHBfaWQYASABKAlCCuI/BxIFYXBwSWRSBWFwcElkEicKCGFwcF9uYW1lGAIgA
  SgJQgziPwkSB2FwcE5hbWVSB2FwcE5hbWUSJwoIYXBwX3R5cGUYAyABKAlCDOI/CRIHYXBwVHlwZVIHYXBwVHlwZRIkCgdhcHBfd
  XJsGAQgASgJQgviPwgSBmFwcFVybFIGYXBwVXJsEiQKB3VzZXJfaWQYBSABKAlCC+I/CBIGdXNlcklkUgZ1c2VySWQSIwoGc2Nvc
  GVzGAYgAygJQgviPwgSBnNjb3Blc1IGc2NvcGVzIp4GCg5QaHlzaWNhbE9iamVjdBIdCgR0eXBlGAEgASgJQgniPwYSBHR5cGVSB
  HR5cGUSHQoEbmFtZRgCIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEjUKDG1hbnVmYWN0dXJlchgDIAEoCUIR4j8OEgxtYW51ZmFjdHVyZ
  XJSDG1hbnVmYWN0dXJlchIjCgZ2ZW5kb3IYBCABKAlCC+I/CBIGdmVuZG9yUgZ2ZW5kb3ISLwoKaWRlbnRpZmllchgFIAEoCUIP4
  j8MEgppZGVudGlmaWVyUgppZGVudGlmaWVyEjYKDXNlcmlhbF9udW1iZXIYBiABKAlCEeI/DhIMc2VyaWFsTnVtYmVyUgxzZXJpY
  WxOdW1iZXISHQoEaW1laRgHIAEoCUIJ4j8GEgRpbWVpUgRpbWVpEh0KBG1laWQYCCABKAlCCeI/BhIEbWVpZFIEbWVpZBJCCghuZ
  XR3b3JrcxgJIAMoCzIXLmlvLm9wZW5pc21zLnYxLk5ldHdvcmtCDeI/ChIIbmV0d29ya3NSCG5ldHdvcmtzEikKCGhvc3RuYW1lG
  AogASgJQg3iPwoSCGhvc3RuYW1lUghob3N0bmFtZRI2Cg11c2VyX2FjY291bnRzGAsgAygJQhHiPw4SDHVzZXJBY2NvdW50c1IMd
  XNlckFjY291bnRzEjgKAm9zGAwgASgLMh8uaW8ub3BlbmlzbXMudjEuT3BlcmF0aW5nU3lzdGVtQgfiPwQSAm9zUgJvcxJLCghzZ
  WN1cml0eRgNIAEoCzIgLmlvLm9wZW5pc21zLnYxLlNlY3VyaXR5RmVhdHVyZXNCDeI/ChIIc2VjdXJpdHlSCHNlY3VyaXR5EkIKC
  HByb2ZpbGVzGA4gAygLMhcuaW8ub3BlbmlzbXMudjEuUHJvZmlsZUIN4j8KEghwcm9maWxlc1IIcHJvZmlsZXMSOgoEYXBwcxgPI
  AMoCzIbLmlvLm9wZW5pc21zLnYxLkFwcGxpY2F0aW9uQgniPwYSBGFwcHNSBGFwcHMSHQoEdGFncxgUIAMoCUIJ4j8GEgR0YWdzU
  gR0YWdzIssGChBTZWN1cml0eUZlYXR1cmVzElgKD2FjdGl2YXRpb25fbG9jaxgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sV
  mFsdWVCE+I/EBIOYWN0aXZhdGlvbkxvY2tSDmFjdGl2YXRpb25Mb2NrEksKCnN1cGVydmlzZWQYAiABKAsyGi5nb29nbGUucHJvd
  G9idWYuQm9vbFZhbHVlQg/iPwwSCnN1cGVydmlzZWRSCnN1cGVydmlzZWQSSQoKZmlsZV92YXVsdBgDIAEoCzIaLmdvb2dsZS5wc
  m90b2J1Zi5Cb29sVmFsdWVCDuI/CxIJZmlsZVZhdWx0UglmaWxlVmF1bHQSZQoUZnVsbF9kaXNrX2VuY3J5cHRpb24YBCABKAsyG
  i5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlQhfiPxQSEmZ1bGxEaXNrRW5jcnlwdGlvblISZnVsbERpc2tFbmNyeXB0aW9uElgKD
  3NlY3VyZV9wYXNzd29yZBgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVCE+I/EBIOc2VjdXJlUGFzc3dvcmRSDnNlY
  3VyZVBhc3N3b3JkEmgKFWF1dG9tYXRpY19zY3JlZW5fbG9jaxgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVCGOI/F
  RITYXV0b21hdGljU2NyZWVuTG9ja1ITYXV0b21hdGljU2NyZWVuTG9jaxJdChFzY3JlZW5fbG9ja19hZnRlchgHIAEoCzIbLmdvb
  2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlQhTiPxESD3NjcmVlbkxvY2tBZnRlclIPc2NyZWVuTG9ja0FmdGVyElsKEGZpcmV3YWxsX
  2VuYWJsZWQYCCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlQhTiPxESD2ZpcmV3YWxsRW5hYmxlZFIPZmlyZXdhbGxFb
  mFibGVkEl4KEWF1dG9tYXRpY191cGRhdGVzGAkgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZUIV4j8SEhBhdXRvbWF0a
  WNVcGRhdGVzUhBhdXRvbWF0aWNVcGRhdGVzInkKB05ldHdvcmsSHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEh0KBHR5c
  GUYAiABKAlCCeI/BhIEdHlwZVIEdHlwZRIwCgttYWNfYWRkcmVzcxgDIAEoCUIP4j8MEgptYWNBZGRyZXNzUgptYWNBZGRyZXNzI
  sEDCg9PcGVyYXRpbmdTeXN0ZW0SOAoCb3MYASABKAsyHy5pby5vcGVuaXNtcy52MS5PcGVyYXRpbmdTeXN0ZW1CB+I/BBICb3NSA
  m9zEjYKDW1ham9yX3ZlcnNpb24YAiABKAlCEeI/DhIMbWFqb3JWZXJzaW9uUgxtYWpvclZlcnNpb24SMwoMZnVsbF92ZXJzaW9uG
  AMgASgJQhDiPw0SC2Z1bGxWZXJzaW9uUgtmdWxsVmVyc2lvbiKGAgoQT3BlcmF0aW5nU3lzdGVtcxIdCgl1bmRlZmluZWQQABoO4
  j8LEgl1bmRlZmluZWQSFQoFbWFjb3MQARoK4j8HEgVtYWNvcxIZCgd3aW5kb3dzEAIaDOI/CRIHd2luZG93cxIVCgVsaW51eBADG
  griPwcSBWxpbnV4EhMKBHVuaXgQBBoJ4j8GEgR1bml4Eh0KCWNocm9tZV9vcxAFGg7iPwsSCWNocm9tZV9vcxIRCgNpb3MQChoI4
  j8FEgNpb3MSGQoHYW5kcm9pZBALGgziPwkSB2FuZHJvaWQSEQoDcm9zEA4aCOI/BRIDcm9zEhUKBW90aGVyEA8aCuI/BxIFb3RoZ
  XIivgMKC0FwcGxpY2F0aW9uEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRIdCgRwYXRoGAIgASgJQgniPwYSBHBhdGhSB
  HBhdGgSIwoGdmVuZG9yGAMgASgJQgviPwgSBnZlbmRvclIGdmVuZG9yEhoKA3VybBgEIAEoCUII4j8FEgN1cmxSA3VybBIyCgtkZ
  XNjcmlwdGlvbhgFIAEoCUIQ4j8NEgtkZXNjcmlwdGlvblILZGVzY3JpcHRpb24SJgoHdmVyc2lvbhgGIAEoCUIM4j8JEgd2ZXJza
  W9uUgd2ZXJzaW9uEj8KBnNpZ25lZBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVCC+I/CBIGc2lnbmVkUgZzaWduZ
  WQSSQoKc3lzdGVtX2FwcBgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVCDuI/CxIJc3lzdGVtQXBwUglzeXN0ZW1Bc
  HASSAoTaW5zdGFsbGF0aW9uX3NvdXJjZRgJIAEoCUIX4j8UEhJpbnN0YWxsYXRpb25Tb3VyY2VSEmluc3RhbGxhdGlvblNvdXJjZ
  SKvAgoHUHJvZmlsZRIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSLwoKaWRlbnRpZmllchgCIAEoCUIP4j8MEgppZGVud
  GlmaWVyUgppZGVudGlmaWVyElgKD3JlbW92YWxfYWxsb3dlZBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVCE+I/E
  BIOcmVtb3ZhbEFsbG93ZWRSDnJlbW92YWxBbGxvd2VkEjMKDHBheWxvYWRfdHlwZRgEIAEoCUIQ4j8NEgtwYXlsb2FkVHlwZVILc
  GF5bG9hZFR5cGUSRQoScGF5bG9hZF9pZGVudGlmaWVyGAUgASgJQhbiPxMSEXBheWxvYWRJZGVudGlmaWVyUhFwYXlsb2FkSWRlb
  nRpZmllciJjCgREYXRlEh0KBHllYXIYASABKAVCCeI/BhIEeWVhclIEeWVhchIgCgVtb250aBgCIAEoBUIK4j8HEgVtb250aFIFb
  W9udGgSGgoDZGF5GAMgASgFQgjiPwUSA2RheVIDZGF5ImkKDUNlcnRpZmljYXRpb24SHQoEdHlwZRgBIAEoCUIJ4j8GEgR0eXBlU
  gR0eXBlEhoKA3VybBgCIAEoCUII4j8FEgN1cmxSA3VybBIdCgR0YWdzGAogAygJQgniPwYSBHRhZ3NSBHRhZ3Mi1wEKB0NvbXBhb
  nkSHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEhoKA3VybBgCIAEoCUII4j8FEgN1cmxSA3VybBIpCghjYXRlZ29yeRgDI
  AEoCUIN4j8KEghjYXRlZ29yeVIIY2F0ZWdvcnkSPgoHY29udGFjdBgEIAEoCzIWLmlvLm9wZW5pc21zLnYxLlBlcnNvbkIM4j8JE
  gdjb250YWN0Ugdjb250YWN0EiYKB2FkZHJlc3MYBSADKAlCDOI/CRIHYWRkcmVzc1IHYWRkcmVzcyK3AwoHUGVudGVzdBIXCgJpZ
  BgBIAEoCUIH4j8EEgJpZFICaWQSNgoFYmVnaW4YAiABKAsyFC5pby5vcGVuaXNtcy52MS5EYXRlQgriPwcSBWJlZ2luUgViZWdpb
  hIwCgNlbmQYAyABKAsyFC5pby5vcGVuaXNtcy52MS5EYXRlQgjiPwUSA2VuZFIDZW5kEj8KB2NvbXBhbnkYBCABKAsyFy5pby5vc
  GVuaXNtcy52MS5Db21wYW55QgziPwkSB2NvbXBhbnlSB2NvbXBhbnkSIAoFZm9jdXMYBSABKAlCCuI/BxIFZm9jdXNSBWZvY3VzE
  iMKBnBhc3NlZBgGIAEoCEIL4j8IEgZwYXNzZWRSBnBhc3NlZBIjCgZyZXN1bHQYByABKAlCC+I/CBIGcmVzdWx0UgZyZXN1bHQSG
  goDdXJsGAggASgJQgjiPwUSA3VybFIDdXJsEkEKCGNvbnRhY3RzGAkgAygLMhYuaW8ub3BlbmlzbXMudjEuUGVyc29uQg3iPwoSC
  GNvbnRhY3RzUghjb250YWN0cxIdCgR0YWdzGAogAygJQgniPwYSBHRhZ3NSBHRhZ3Mi8QIKClJlcG9zaXRvcnkSHQoEbmFtZRgBI
  AEoCUIJ4j8GEgRuYW1lUgRuYW1lEhoKA3VybBgCIAEoCUII4j8FEgN1cmxSA3VybBIyCgtkZXNjcmlwdGlvbhgDIAEoCUIQ4j8NE
  gtkZXNjcmlwdGlvblILZGVzY3JpcHRpb24SSwoKdmlzaWJpbGl0eRgEIAEoDjIaLmlvLm9wZW5pc21zLnYxLlZpc2liaWxpdHlCD
  +I/DBIKdmlzaWJpbGl0eVIKdmlzaWJpbGl0eRI+CgdtZW1iZXJzGAUgAygLMhYuaW8ub3BlbmlzbXMudjEuUGVyc29uQgziPwkSB
  21lbWJlcnNSB21lbWJlcnMSSAoTc2VjdXJpdHlfYXR0cmlidXRlcxgGIAMoCUIX4j8UEhJzZWN1cml0eUF0dHJpYnV0ZXNSEnNlY
  3VyaXR5QXR0cmlidXRlcxIdCgR0YWdzGAogAygJQgniPwYSBHRhZ3NSBHRhZ3MipgEKClN0YXRpc3RpY3MSLwoKaWRlbnRpZmllc
  hgBIAEoCUIP4j8MEgppZGVudGlmaWVyUgppZGVudGlmaWVyEh0KBG5hbWUYAiABKAlCCeI/BhIEbmFtZVIEbmFtZRIgCgV2YWx1Z
  RgDIAEoBUIK4j8HEgV2YWx1ZVIFdmFsdWUSJgoHY29tbWVudBgEIAEoCUIM4j8JEgdjb21tZW50Ugdjb21tZW50KoYBCgpWaXNpY
  mlsaXR5Eh0KCXVuZGVmaW5lZBAAGg7iPwsSCXVuZGVmaW5lZBIXCgZwdWJsaWMQARoL4j8IEgZwdWJsaWMSGwoIaW50ZXJuYWwQA
  hoN4j8KEghpbnRlcm5hbBIjCgxjb25maWRlbnRpYWwQAxoR4j8OEgxjb25maWRlbnRpYWxCJgoLaW8ub3BlbmlzbXNaF2dpdGh1Y
  i5jb20vb3BlbmlzbXMvYXBpYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.protobuf.wrappers.WrappersProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}