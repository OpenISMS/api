// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.openisms.api

@SerialVersionUID(0L)
final case class Company(
    name: _root_.scala.Predef.String = "",
    url: _root_.scala.Predef.String = "",
    category: _root_.scala.Predef.String = "",
    contact: _root_.scala.Option[io.openisms.api.Person] = _root_.scala.None,
    address: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Company] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = url
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = category
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      if (contact.isDefined) {
        val __value = contact.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      address.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = url
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = category
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      contact.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      address.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): Company = copy(name = __v)
    def withUrl(__v: _root_.scala.Predef.String): Company = copy(url = __v)
    def withCategory(__v: _root_.scala.Predef.String): Company = copy(category = __v)
    def getContact: io.openisms.api.Person = contact.getOrElse(io.openisms.api.Person.defaultInstance)
    def clearContact: Company = copy(contact = _root_.scala.None)
    def withContact(__v: io.openisms.api.Person): Company = copy(contact = Option(__v))
    def clearAddress = copy(address = _root_.scala.Seq.empty)
    def addAddress(__vs: _root_.scala.Predef.String *): Company = addAllAddress(__vs)
    def addAllAddress(__vs: Iterable[_root_.scala.Predef.String]): Company = copy(address = address ++ __vs)
    def withAddress(__v: _root_.scala.Seq[_root_.scala.Predef.String]): Company = copy(address = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = url
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = category
          if (__t != "") __t else null
        }
        case 4 => contact.orNull
        case 5 => address
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PString(url)
        case 3 => _root_.scalapb.descriptors.PString(category)
        case 4 => contact.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PRepeated(address.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.openisms.api.Company.type = io.openisms.api.Company
    // @@protoc_insertion_point(GeneratedMessage[io.openisms.v1.Company])
}

object Company extends scalapb.GeneratedMessageCompanion[io.openisms.api.Company] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.openisms.api.Company] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.openisms.api.Company = {
    var __name: _root_.scala.Predef.String = ""
    var __url: _root_.scala.Predef.String = ""
    var __category: _root_.scala.Predef.String = ""
    var __contact: _root_.scala.Option[io.openisms.api.Person] = _root_.scala.None
    val __address: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
        case 18 =>
          __url = _input__.readStringRequireUtf8()
        case 26 =>
          __category = _input__.readStringRequireUtf8()
        case 34 =>
          __contact = Option(__contact.fold(_root_.scalapb.LiteParser.readMessage[io.openisms.api.Person](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __address += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.openisms.api.Company(
        name = __name,
        url = __url,
        category = __category,
        contact = __contact,
        address = __address.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.openisms.api.Company] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.openisms.api.Company(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        url = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        category = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        contact = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.openisms.api.Person]]),
        address = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiProto.javaDescriptor.getMessageTypes().get(17)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiProto.scalaDescriptor.messages(17)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = io.openisms.api.Person
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.openisms.api.Company(
    name = "",
    url = "",
    category = "",
    contact = _root_.scala.None,
    address = _root_.scala.Seq.empty
  )
  implicit class CompanyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.Company]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.openisms.api.Company](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def url: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.url)((c_, f_) => c_.copy(url = f_))
    def category: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.category)((c_, f_) => c_.copy(category = f_))
    def contact: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.Person] = field(_.getContact)((c_, f_) => c_.copy(contact = Option(f_)))
    def optionalContact: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.openisms.api.Person]] = field(_.contact)((c_, f_) => c_.copy(contact = f_))
    def address: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.address)((c_, f_) => c_.copy(address = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val URL_FIELD_NUMBER = 2
  final val CATEGORY_FIELD_NUMBER = 3
  final val CONTACT_FIELD_NUMBER = 4
  final val ADDRESS_FIELD_NUMBER = 5
  def of(
    name: _root_.scala.Predef.String,
    url: _root_.scala.Predef.String,
    category: _root_.scala.Predef.String,
    contact: _root_.scala.Option[io.openisms.api.Person],
    address: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.io.openisms.api.Company = _root_.io.openisms.api.Company(
    name,
    url,
    category,
    contact,
    address
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.openisms.v1.Company])
}
