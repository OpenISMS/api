// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.openisms.api

/** @param title
  *   Dr., Sir
  * @param position
  *   CEO, CTO
  * @param role
  *   Developer, Customer Support Agent
  */
@SerialVersionUID(0L)
final case class Name(
    givenName: _root_.scala.Predef.String = "",
    familyName: _root_.scala.Predef.String = "",
    fullName: _root_.scala.Predef.String = "",
    title: _root_.scala.Predef.String = "",
    position: _root_.scala.Predef.String = "",
    role: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Name] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = givenName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = familyName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = fullName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = title
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = position
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = role
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = givenName
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = familyName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = fullName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = title
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = position
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = role
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withGivenName(__v: _root_.scala.Predef.String): Name = copy(givenName = __v)
    def withFamilyName(__v: _root_.scala.Predef.String): Name = copy(familyName = __v)
    def withFullName(__v: _root_.scala.Predef.String): Name = copy(fullName = __v)
    def withTitle(__v: _root_.scala.Predef.String): Name = copy(title = __v)
    def withPosition(__v: _root_.scala.Predef.String): Name = copy(position = __v)
    def withRole(__v: _root_.scala.Predef.String): Name = copy(role = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = givenName
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = familyName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = fullName
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = title
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = position
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = role
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(givenName)
        case 2 => _root_.scalapb.descriptors.PString(familyName)
        case 3 => _root_.scalapb.descriptors.PString(fullName)
        case 4 => _root_.scalapb.descriptors.PString(title)
        case 5 => _root_.scalapb.descriptors.PString(position)
        case 6 => _root_.scalapb.descriptors.PString(role)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.openisms.api.Name.type = io.openisms.api.Name
    // @@protoc_insertion_point(GeneratedMessage[io.openisms.v1.Name])
}

object Name extends scalapb.GeneratedMessageCompanion[io.openisms.api.Name] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.openisms.api.Name] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.openisms.api.Name = {
    var __givenName: _root_.scala.Predef.String = ""
    var __familyName: _root_.scala.Predef.String = ""
    var __fullName: _root_.scala.Predef.String = ""
    var __title: _root_.scala.Predef.String = ""
    var __position: _root_.scala.Predef.String = ""
    var __role: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __givenName = _input__.readStringRequireUtf8()
        case 18 =>
          __familyName = _input__.readStringRequireUtf8()
        case 26 =>
          __fullName = _input__.readStringRequireUtf8()
        case 34 =>
          __title = _input__.readStringRequireUtf8()
        case 42 =>
          __position = _input__.readStringRequireUtf8()
        case 50 =>
          __role = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.openisms.api.Name(
        givenName = __givenName,
        familyName = __familyName,
        fullName = __fullName,
        title = __title,
        position = __position,
        role = __role,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.openisms.api.Name] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.openisms.api.Name(
        givenName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        familyName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        fullName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        title = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        position = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        role = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.openisms.api.Name(
    givenName = "",
    familyName = "",
    fullName = "",
    title = "",
    position = "",
    role = ""
  )
  implicit class NameLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.openisms.api.Name]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.openisms.api.Name](_l) {
    def givenName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.givenName)((c_, f_) => c_.copy(givenName = f_))
    def familyName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.familyName)((c_, f_) => c_.copy(familyName = f_))
    def fullName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fullName)((c_, f_) => c_.copy(fullName = f_))
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.title)((c_, f_) => c_.copy(title = f_))
    def position: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.position)((c_, f_) => c_.copy(position = f_))
    def role: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.role)((c_, f_) => c_.copy(role = f_))
  }
  final val GIVEN_NAME_FIELD_NUMBER = 1
  final val FAMILY_NAME_FIELD_NUMBER = 2
  final val FULL_NAME_FIELD_NUMBER = 3
  final val TITLE_FIELD_NUMBER = 4
  final val POSITION_FIELD_NUMBER = 5
  final val ROLE_FIELD_NUMBER = 6
  def of(
    givenName: _root_.scala.Predef.String,
    familyName: _root_.scala.Predef.String,
    fullName: _root_.scala.Predef.String,
    title: _root_.scala.Predef.String,
    position: _root_.scala.Predef.String,
    role: _root_.scala.Predef.String
  ): _root_.io.openisms.api.Name = _root_.io.openisms.api.Name(
    givenName,
    familyName,
    fullName,
    title,
    position,
    role
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.openisms.v1.Name])
}
