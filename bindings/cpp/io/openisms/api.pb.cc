// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/openisms/api.proto

#include "io/openisms/api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace io {
namespace openisms {
namespace v1 {
PROTOBUF_CONSTEXPR Event::Event(
    ::_pbi::ConstantInitialized)
  : users_()
  , devices_()
  , repositories_()
  , certification_()
  , pentest_()
  , stats_()
  , meta_(nullptr)
  , source_(nullptr){}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
PROTOBUF_CONSTEXPR Meta::Meta(
    ::_pbi::ConstantInitialized)
  : identifier_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , etag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , created_(nullptr){}
struct MetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetaDefaultTypeInternal() {}
  union {
    Meta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetaDefaultTypeInternal _Meta_default_instance_;
PROTOBUF_CONSTEXPR SourceSystem::SourceSystem(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , vendor_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , logo_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0)
{}
struct SourceSystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceSystemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceSystemDefaultTypeInternal() {}
  union {
    SourceSystem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceSystemDefaultTypeInternal _SourceSystem_default_instance_;
PROTOBUF_CONSTEXPR User::User(
    ::_pbi::ConstantInitialized)
  : groups_()
  , privileges_()
  , connected_accounts_()
  , possessions_()
  , tags_()
  , person_(nullptr)
  , second_factor_active_(nullptr)
  , second_factor_enforced_(nullptr)
  , active_(nullptr)
  , suspended_(nullptr)
  , disabled_(nullptr)
  , deleted_(nullptr)
  , employment_(nullptr){}
struct UserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserDefaultTypeInternal() {}
  union {
    User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDefaultTypeInternal _User_default_instance_;
PROTOBUF_CONSTEXPR Person::Person(
    ::_pbi::ConstantInitialized)
  : other_emails_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , primary_email_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , company_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(nullptr)
  , picture_(nullptr)
  , created_(nullptr)
  , updated_(nullptr){}
struct PersonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersonDefaultTypeInternal() {}
  union {
    Person _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersonDefaultTypeInternal _Person_default_instance_;
PROTOBUF_CONSTEXPR Name::Name(
    ::_pbi::ConstantInitialized)
  : given_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , family_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , full_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , position_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , role_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct NameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NameDefaultTypeInternal() {}
  union {
    Name _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NameDefaultTypeInternal _Name_default_instance_;
PROTOBUF_CONSTEXPR UrlWithEtag::UrlWithEtag(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , etag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_modified_(nullptr){}
struct UrlWithEtagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UrlWithEtagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UrlWithEtagDefaultTypeInternal() {}
  union {
    UrlWithEtag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UrlWithEtagDefaultTypeInternal _UrlWithEtag_default_instance_;
PROTOBUF_CONSTEXPR Employment::Employment(
    ::_pbi::ConstantInitialized)
  : contract_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , begin_(nullptr)
  , end_(nullptr){}
struct EmploymentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmploymentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmploymentDefaultTypeInternal() {}
  union {
    Employment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmploymentDefaultTypeInternal _Employment_default_instance_;
PROTOBUF_CONSTEXPR ConnectedAccount::ConnectedAccount(
    ::_pbi::ConstantInitialized)
  : scopes_()
  , app_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , app_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , app_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , app_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ConnectedAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectedAccountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectedAccountDefaultTypeInternal() {}
  union {
    ConnectedAccount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectedAccountDefaultTypeInternal _ConnectedAccount_default_instance_;
PROTOBUF_CONSTEXPR PhysicalObject::PhysicalObject(
    ::_pbi::ConstantInitialized)
  : networks_()
  , user_accounts_()
  , profiles_()
  , apps_()
  , tags_()
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , manufacturer_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , vendor_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , identifier_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , serial_number_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , imei_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , meid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hostname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , os_(nullptr)
  , security_(nullptr){}
struct PhysicalObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhysicalObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhysicalObjectDefaultTypeInternal() {}
  union {
    PhysicalObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhysicalObjectDefaultTypeInternal _PhysicalObject_default_instance_;
PROTOBUF_CONSTEXPR SecurityFeatures::SecurityFeatures(
    ::_pbi::ConstantInitialized)
  : activation_lock_(nullptr)
  , supervised_(nullptr)
  , file_vault_(nullptr)
  , full_disk_encryption_(nullptr)
  , secure_password_(nullptr)
  , automatic_screen_lock_(nullptr)
  , screen_lock_after_(nullptr)
  , firewall_enabled_(nullptr)
  , automatic_updates_(nullptr){}
struct SecurityFeaturesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecurityFeaturesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecurityFeaturesDefaultTypeInternal() {}
  union {
    SecurityFeatures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecurityFeaturesDefaultTypeInternal _SecurityFeatures_default_instance_;
PROTOBUF_CONSTEXPR Network::Network(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mac_address_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct NetworkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkDefaultTypeInternal() {}
  union {
    Network _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkDefaultTypeInternal _Network_default_instance_;
PROTOBUF_CONSTEXPR OperatingSystem::OperatingSystem(
    ::_pbi::ConstantInitialized)
  : major_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , full_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , os_(0)
{}
struct OperatingSystemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperatingSystemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperatingSystemDefaultTypeInternal() {}
  union {
    OperatingSystem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperatingSystemDefaultTypeInternal _OperatingSystem_default_instance_;
PROTOBUF_CONSTEXPR Application::Application(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , vendor_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , installation_source_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , signed__(nullptr)
  , system_app_(nullptr){}
struct ApplicationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplicationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplicationDefaultTypeInternal() {}
  union {
    Application _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplicationDefaultTypeInternal _Application_default_instance_;
PROTOBUF_CONSTEXPR Profile::Profile(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , identifier_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , payload_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , payload_identifier_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , removal_allowed_(nullptr){}
struct ProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfileDefaultTypeInternal() {}
  union {
    Profile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfileDefaultTypeInternal _Profile_default_instance_;
PROTOBUF_CONSTEXPR Date::Date(
    ::_pbi::ConstantInitialized)
  : year_(0)
  , month_(0)
  , day_(0){}
struct DateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DateDefaultTypeInternal() {}
  union {
    Date _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DateDefaultTypeInternal _Date_default_instance_;
PROTOBUF_CONSTEXPR Certification::Certification(
    ::_pbi::ConstantInitialized)
  : tags_()
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CertificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CertificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CertificationDefaultTypeInternal() {}
  union {
    Certification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CertificationDefaultTypeInternal _Certification_default_instance_;
PROTOBUF_CONSTEXPR Company::Company(
    ::_pbi::ConstantInitialized)
  : address_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , category_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , contact_(nullptr){}
struct CompanyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompanyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompanyDefaultTypeInternal() {}
  union {
    Company _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompanyDefaultTypeInternal _Company_default_instance_;
PROTOBUF_CONSTEXPR Pentest::Pentest(
    ::_pbi::ConstantInitialized)
  : contacts_()
  , tags_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , focus_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , result_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , begin_(nullptr)
  , end_(nullptr)
  , company_(nullptr)
  , passed_(false){}
struct PentestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PentestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PentestDefaultTypeInternal() {}
  union {
    Pentest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PentestDefaultTypeInternal _Pentest_default_instance_;
PROTOBUF_CONSTEXPR Repository::Repository(
    ::_pbi::ConstantInitialized)
  : members_()
  , security_attributes_()
  , tags_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , visibility_(0)
{}
struct RepositoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RepositoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RepositoryDefaultTypeInternal() {}
  union {
    Repository _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RepositoryDefaultTypeInternal _Repository_default_instance_;
PROTOBUF_CONSTEXPR Statistics::Statistics(
    ::_pbi::ConstantInitialized)
  : identifier_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , comment_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(0){}
struct StatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatisticsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatisticsDefaultTypeInternal() {}
  union {
    Statistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatisticsDefaultTypeInternal _Statistics_default_instance_;
}  // namespace v1
}  // namespace openisms
}  // namespace io
static ::_pb::Metadata file_level_metadata_io_2fopenisms_2fapi_2eproto[21];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_io_2fopenisms_2fapi_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_io_2fopenisms_2fapi_2eproto = nullptr;

const uint32_t TableStruct_io_2fopenisms_2fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Event, meta_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Event, source_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Event, users_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Event, devices_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Event, repositories_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Event, certification_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Event, pentest_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Event, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Meta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Meta, created_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Meta, identifier_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Meta, etag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SourceSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SourceSystem, name_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SourceSystem, vendor_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SourceSystem, url_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SourceSystem, logo_url_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SourceSystem, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, person_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, second_factor_active_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, second_factor_enforced_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, active_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, suspended_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, disabled_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, deleted_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, groups_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, privileges_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, employment_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, connected_accounts_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, possessions_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::User, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Person, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Person, id_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Person, name_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Person, primary_email_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Person, other_emails_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Person, picture_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Person, company_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Person, created_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Person, updated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Name, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Name, given_name_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Name, family_name_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Name, full_name_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Name, title_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Name, position_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Name, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::UrlWithEtag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::UrlWithEtag, url_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::UrlWithEtag, etag_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::UrlWithEtag, last_modified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Employment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Employment, contract_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Employment, status_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Employment, begin_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Employment, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::ConnectedAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::ConnectedAccount, app_id_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::ConnectedAccount, app_name_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::ConnectedAccount, app_type_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::ConnectedAccount, app_url_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::ConnectedAccount, user_id_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::ConnectedAccount, scopes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, type_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, name_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, vendor_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, identifier_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, serial_number_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, imei_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, meid_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, networks_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, hostname_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, user_accounts_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, os_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, security_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, profiles_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, apps_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::PhysicalObject, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SecurityFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SecurityFeatures, activation_lock_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SecurityFeatures, supervised_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SecurityFeatures, file_vault_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SecurityFeatures, full_disk_encryption_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SecurityFeatures, secure_password_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SecurityFeatures, automatic_screen_lock_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SecurityFeatures, screen_lock_after_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SecurityFeatures, firewall_enabled_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::SecurityFeatures, automatic_updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Network, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Network, name_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Network, type_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Network, mac_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::OperatingSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::OperatingSystem, os_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::OperatingSystem, major_version_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::OperatingSystem, full_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Application, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Application, name_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Application, path_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Application, vendor_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Application, url_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Application, description_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Application, version_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Application, signed__),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Application, system_app_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Application, installation_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Profile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Profile, name_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Profile, identifier_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Profile, removal_allowed_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Profile, payload_type_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Profile, payload_identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Date, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Date, year_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Date, month_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Date, day_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Certification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Certification, type_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Certification, url_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Certification, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Company, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Company, name_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Company, url_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Company, category_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Company, contact_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Company, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Pentest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Pentest, id_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Pentest, begin_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Pentest, end_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Pentest, company_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Pentest, focus_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Pentest, passed_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Pentest, result_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Pentest, url_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Pentest, contacts_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Pentest, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Repository, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Repository, name_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Repository, url_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Repository, description_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Repository, visibility_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Repository, members_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Repository, security_attributes_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Repository, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Statistics, identifier_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Statistics, name_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Statistics, value_),
  PROTOBUF_FIELD_OFFSET(::io::openisms::v1::Statistics, comment_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::io::openisms::v1::Event)},
  { 14, -1, -1, sizeof(::io::openisms::v1::Meta)},
  { 23, -1, -1, sizeof(::io::openisms::v1::SourceSystem)},
  { 34, -1, -1, sizeof(::io::openisms::v1::User)},
  { 53, -1, -1, sizeof(::io::openisms::v1::Person)},
  { 67, -1, -1, sizeof(::io::openisms::v1::Name)},
  { 79, -1, -1, sizeof(::io::openisms::v1::UrlWithEtag)},
  { 88, -1, -1, sizeof(::io::openisms::v1::Employment)},
  { 98, -1, -1, sizeof(::io::openisms::v1::ConnectedAccount)},
  { 110, -1, -1, sizeof(::io::openisms::v1::PhysicalObject)},
  { 132, -1, -1, sizeof(::io::openisms::v1::SecurityFeatures)},
  { 147, -1, -1, sizeof(::io::openisms::v1::Network)},
  { 156, -1, -1, sizeof(::io::openisms::v1::OperatingSystem)},
  { 165, -1, -1, sizeof(::io::openisms::v1::Application)},
  { 180, -1, -1, sizeof(::io::openisms::v1::Profile)},
  { 191, -1, -1, sizeof(::io::openisms::v1::Date)},
  { 200, -1, -1, sizeof(::io::openisms::v1::Certification)},
  { 209, -1, -1, sizeof(::io::openisms::v1::Company)},
  { 220, -1, -1, sizeof(::io::openisms::v1::Pentest)},
  { 236, -1, -1, sizeof(::io::openisms::v1::Repository)},
  { 249, -1, -1, sizeof(::io::openisms::v1::Statistics)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::io::openisms::v1::_Event_default_instance_._instance,
  &::io::openisms::v1::_Meta_default_instance_._instance,
  &::io::openisms::v1::_SourceSystem_default_instance_._instance,
  &::io::openisms::v1::_User_default_instance_._instance,
  &::io::openisms::v1::_Person_default_instance_._instance,
  &::io::openisms::v1::_Name_default_instance_._instance,
  &::io::openisms::v1::_UrlWithEtag_default_instance_._instance,
  &::io::openisms::v1::_Employment_default_instance_._instance,
  &::io::openisms::v1::_ConnectedAccount_default_instance_._instance,
  &::io::openisms::v1::_PhysicalObject_default_instance_._instance,
  &::io::openisms::v1::_SecurityFeatures_default_instance_._instance,
  &::io::openisms::v1::_Network_default_instance_._instance,
  &::io::openisms::v1::_OperatingSystem_default_instance_._instance,
  &::io::openisms::v1::_Application_default_instance_._instance,
  &::io::openisms::v1::_Profile_default_instance_._instance,
  &::io::openisms::v1::_Date_default_instance_._instance,
  &::io::openisms::v1::_Certification_default_instance_._instance,
  &::io::openisms::v1::_Company_default_instance_._instance,
  &::io::openisms::v1::_Pentest_default_instance_._instance,
  &::io::openisms::v1::_Repository_default_instance_._instance,
  &::io::openisms::v1::_Statistics_default_instance_._instance,
};

const char descriptor_table_protodef_io_2fopenisms_2fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025io/openisms/api.proto\022\016io.openisms.v1\032"
  "\037google/protobuf/timestamp.proto\032\036google"
  "/protobuf/wrappers.proto\"\354\002\n\005Event\022\"\n\004me"
  "ta\030\001 \001(\0132\024.io.openisms.v1.Meta\022,\n\006source"
  "\030\002 \001(\0132\034.io.openisms.v1.SourceSystem\022#\n\005"
  "users\030\003 \003(\0132\024.io.openisms.v1.User\022/\n\007dev"
  "ices\030\004 \003(\0132\036.io.openisms.v1.PhysicalObje"
  "ct\0220\n\014repositories\030\007 \003(\0132\032.io.openisms.v"
  "1.Repository\0224\n\rcertification\030\t \003(\0132\035.io"
  ".openisms.v1.Certification\022(\n\007pentest\030\013 "
  "\003(\0132\027.io.openisms.v1.Pentest\022)\n\005stats\030\r "
  "\003(\0132\032.io.openisms.v1.Statistics\"U\n\004Meta\022"
  "+\n\007created\030\001 \001(\0132\032.google.protobuf.Times"
  "tamp\022\022\n\nidentifier\030\002 \001(\t\022\014\n\004etag\030\003 \001(\t\"\341"
  "\003\n\014SourceSystem\022\014\n\004name\030\001 \001(\t\022\016\n\006vendor\030"
  "\002 \001(\t\022\013\n\003url\030\003 \001(\t\022\020\n\010logo_url\030\004 \001(\t\0225\n\004"
  "type\030\005 \001(\0162\'.io.openisms.v1.SourceSystem"
  ".SourceType\"\334\002\n\nSourceType\022\r\n\tundefined\020"
  "\000\022\025\n\021identity_provider\020\001\022\035\n\031source_contr"
  "ol_management\020\002\022\022\n\016cloud_provider\020\003\022\014\n\010d"
  "atabase\020\004\022\013\n\007network\020\005\022\025\n\021device_managem"
  "ent\020\n\022\025\n\021security_software\020\013\022\024\n\020password"
  "_manager\020\014\022\021\n\rcommunication\020\024\022\023\n\017human_r"
  "esources\020\025\022\035\n\031content_management_system\020"
  "\026\022\r\n\tticketing\020\027\022$\n customer_relationshi"
  "p_management\020\030\022\013\n\007finance\020\031\022\r\n\tanalytics"
  "\020\032\"\257\004\n\004User\022&\n\006person\030\001 \001(\0132\026.io.openism"
  "s.v1.Person\0228\n\024second_factor_active\030\005 \001("
  "\0132\032.google.protobuf.BoolValue\022:\n\026second_"
  "factor_enforced\030\006 \001(\0132\032.google.protobuf."
  "BoolValue\022*\n\006active\030\007 \001(\0132\032.google.proto"
  "buf.BoolValue\022-\n\tsuspended\030\010 \001(\0132\032.googl"
  "e.protobuf.BoolValue\022,\n\010disabled\030\t \001(\0132\032"
  ".google.protobuf.BoolValue\022+\n\007deleted\030\n "
  "\001(\0132\032.google.protobuf.BoolValue\022\016\n\006group"
  "s\030\017 \003(\t\022\022\n\nprivileges\030\020 \003(\t\022.\n\nemploymen"
  "t\030\024 \001(\0132\032.io.openisms.v1.Employment\022<\n\022c"
  "onnected_accounts\030\025 \003(\0132 .io.openisms.v1"
  ".ConnectedAccount\0223\n\013possessions\030\026 \003(\0132\036"
  ".io.openisms.v1.PhysicalObject\022\014\n\004tags\030("
  " \003(\t\"\376\001\n\006Person\022\n\n\002id\030\001 \001(\t\022\"\n\004name\030\002 \001("
  "\0132\024.io.openisms.v1.Name\022\025\n\rprimary_email"
  "\030\003 \001(\t\022\024\n\014other_emails\030\004 \003(\t\022,\n\007picture\030"
  "\005 \001(\0132\033.io.openisms.v1.UrlWithEtag\022\017\n\007co"
  "mpany\030\006 \001(\t\022+\n\007created\030\n \001(\0132\032.google.pr"
  "otobuf.Timestamp\022+\n\007updated\030\013 \001(\0132\032.goog"
  "le.protobuf.Timestamp\"q\n\004Name\022\022\n\ngiven_n"
  "ame\030\001 \001(\t\022\023\n\013family_name\030\002 \001(\t\022\021\n\tfull_n"
  "ame\030\003 \001(\t\022\r\n\005title\030\004 \001(\t\022\020\n\010position\030\005 \001"
  "(\t\022\014\n\004role\030\006 \001(\t\"[\n\013UrlWithEtag\022\013\n\003url\030\001"
  " \001(\t\022\014\n\004etag\030\002 \001(\t\0221\n\rlast_modified\030\003 \001("
  "\0132\032.google.protobuf.Timestamp\"v\n\nEmploym"
  "ent\022\020\n\010contract\030\001 \001(\t\022\016\n\006status\030\002 \001(\t\022#\n"
  "\005begin\030\003 \001(\0132\024.io.openisms.v1.Date\022!\n\003en"
  "d\030\004 \001(\0132\024.io.openisms.v1.Date\"x\n\020Connect"
  "edAccount\022\016\n\006app_id\030\001 \001(\t\022\020\n\010app_name\030\002 "
  "\001(\t\022\020\n\010app_type\030\003 \001(\t\022\017\n\007app_url\030\004 \001(\t\022\017"
  "\n\007user_id\030\005 \001(\t\022\016\n\006scopes\030\006 \003(\t\"\262\003\n\016Phys"
  "icalObject\022\014\n\004type\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\024"
  "\n\014manufacturer\030\003 \001(\t\022\016\n\006vendor\030\004 \001(\t\022\022\n\n"
  "identifier\030\005 \001(\t\022\025\n\rserial_number\030\006 \001(\t\022"
  "\014\n\004imei\030\007 \001(\t\022\014\n\004meid\030\010 \001(\t\022)\n\010networks\030"
  "\t \003(\0132\027.io.openisms.v1.Network\022\020\n\010hostna"
  "me\030\n \001(\t\022\025\n\ruser_accounts\030\013 \003(\t\022+\n\002os\030\014 "
  "\001(\0132\037.io.openisms.v1.OperatingSystem\0222\n\010"
  "security\030\r \001(\0132 .io.openisms.v1.Security"
  "Features\022)\n\010profiles\030\016 \003(\0132\027.io.openisms"
  ".v1.Profile\022)\n\004apps\030\017 \003(\0132\033.io.openisms."
  "v1.Application\022\014\n\004tags\030\024 \003(\t\"\366\003\n\020Securit"
  "yFeatures\0223\n\017activation_lock\030\001 \001(\0132\032.goo"
  "gle.protobuf.BoolValue\022.\n\nsupervised\030\002 \001"
  "(\0132\032.google.protobuf.BoolValue\022.\n\nfile_v"
  "ault\030\003 \001(\0132\032.google.protobuf.BoolValue\0228"
  "\n\024full_disk_encryption\030\004 \001(\0132\032.google.pr"
  "otobuf.BoolValue\0223\n\017secure_password\030\005 \001("
  "\0132\032.google.protobuf.BoolValue\0229\n\025automat"
  "ic_screen_lock\030\006 \001(\0132\032.google.protobuf.B"
  "oolValue\0226\n\021screen_lock_after\030\007 \001(\0132\033.go"
  "ogle.protobuf.Int32Value\0224\n\020firewall_ena"
  "bled\030\010 \001(\0132\032.google.protobuf.BoolValue\0225"
  "\n\021automatic_updates\030\t \001(\0132\032.google.proto"
  "buf.BoolValue\":\n\007Network\022\014\n\004name\030\001 \001(\t\022\014"
  "\n\004type\030\002 \001(\t\022\023\n\013mac_address\030\003 \001(\t\"\206\002\n\017Op"
  "eratingSystem\022<\n\002os\030\001 \001(\01620.io.openisms."
  "v1.OperatingSystem.OperatingSystems\022\025\n\rm"
  "ajor_version\030\002 \001(\t\022\024\n\014full_version\030\003 \001(\t"
  "\"\207\001\n\020OperatingSystems\022\r\n\tundefined\020\000\022\t\n\005"
  "macos\020\001\022\013\n\007windows\020\002\022\t\n\005linux\020\003\022\010\n\004unix\020"
  "\004\022\r\n\tchrome_os\020\005\022\007\n\003ios\020\n\022\013\n\007android\020\013\022\007"
  "\n\003ros\020\016\022\t\n\005other\020\017\"\345\001\n\013Application\022\014\n\004na"
  "me\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\022\016\n\006vendor\030\003 \001(\t\022\013"
  "\n\003url\030\004 \001(\t\022\023\n\013description\030\005 \001(\t\022\017\n\007vers"
  "ion\030\006 \001(\t\022*\n\006signed\030\007 \001(\0132\032.google.proto"
  "buf.BoolValue\022.\n\nsystem_app\030\010 \001(\0132\032.goog"
  "le.protobuf.BoolValue\022\033\n\023installation_so"
  "urce\030\t \001(\t\"\222\001\n\007Profile\022\014\n\004name\030\001 \001(\t\022\022\n\n"
  "identifier\030\002 \001(\t\0223\n\017removal_allowed\030\003 \001("
  "\0132\032.google.protobuf.BoolValue\022\024\n\014payload"
  "_type\030\004 \001(\t\022\032\n\022payload_identifier\030\005 \001(\t\""
  "0\n\004Date\022\014\n\004year\030\001 \001(\005\022\r\n\005month\030\002 \001(\005\022\013\n\003"
  "day\030\003 \001(\005\"8\n\rCertification\022\014\n\004type\030\001 \001(\t"
  "\022\013\n\003url\030\002 \001(\t\022\014\n\004tags\030\n \003(\t\"p\n\007Company\022\014"
  "\n\004name\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\022\020\n\010category\030\003 "
  "\001(\t\022\'\n\007contact\030\004 \001(\0132\026.io.openisms.v1.Pe"
  "rson\022\017\n\007address\030\005 \003(\t\"\373\001\n\007Pentest\022\n\n\002id\030"
  "\001 \001(\t\022#\n\005begin\030\002 \001(\0132\024.io.openisms.v1.Da"
  "te\022!\n\003end\030\003 \001(\0132\024.io.openisms.v1.Date\022(\n"
  "\007company\030\004 \001(\0132\027.io.openisms.v1.Company\022"
  "\r\n\005focus\030\005 \001(\t\022\016\n\006passed\030\006 \001(\010\022\016\n\006result"
  "\030\007 \001(\t\022\013\n\003url\030\010 \001(\t\022(\n\010contacts\030\t \003(\0132\026."
  "io.openisms.v1.Person\022\014\n\004tags\030\n \003(\t\"\300\001\n\n"
  "Repository\022\014\n\004name\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\022\023\n"
  "\013description\030\003 \001(\t\022.\n\nvisibility\030\004 \001(\0162\032"
  ".io.openisms.v1.Visibility\022\'\n\007members\030\005 "
  "\003(\0132\026.io.openisms.v1.Person\022\033\n\023security_"
  "attributes\030\006 \003(\t\022\014\n\004tags\030\n \003(\t\"N\n\nStatis"
  "tics\022\022\n\nidentifier\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\r"
  "\n\005value\030\003 \001(\005\022\017\n\007comment\030\004 \001(\t*G\n\nVisibi"
  "lity\022\r\n\tundefined\020\000\022\n\n\006public\020\001\022\014\n\010inter"
  "nal\020\002\022\020\n\014confidential\020\003B&\n\013io.openismsZ\027"
  "github.com/openisms/apib\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_io_2fopenisms_2fapi_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_io_2fopenisms_2fapi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_io_2fopenisms_2fapi_2eproto = {
    false, false, 4831, descriptor_table_protodef_io_2fopenisms_2fapi_2eproto,
    "io/openisms/api.proto",
    &descriptor_table_io_2fopenisms_2fapi_2eproto_once, descriptor_table_io_2fopenisms_2fapi_2eproto_deps, 2, 21,
    schemas, file_default_instances, TableStruct_io_2fopenisms_2fapi_2eproto::offsets,
    file_level_metadata_io_2fopenisms_2fapi_2eproto, file_level_enum_descriptors_io_2fopenisms_2fapi_2eproto,
    file_level_service_descriptors_io_2fopenisms_2fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_io_2fopenisms_2fapi_2eproto_getter() {
  return &descriptor_table_io_2fopenisms_2fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_io_2fopenisms_2fapi_2eproto(&descriptor_table_io_2fopenisms_2fapi_2eproto);
namespace io {
namespace openisms {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceSystem_SourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_io_2fopenisms_2fapi_2eproto);
  return file_level_enum_descriptors_io_2fopenisms_2fapi_2eproto[0];
}
bool SourceSystem_SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 10:
    case 11:
    case 12:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SourceSystem_SourceType SourceSystem::undefined;
constexpr SourceSystem_SourceType SourceSystem::identity_provider;
constexpr SourceSystem_SourceType SourceSystem::source_control_management;
constexpr SourceSystem_SourceType SourceSystem::cloud_provider;
constexpr SourceSystem_SourceType SourceSystem::database;
constexpr SourceSystem_SourceType SourceSystem::network;
constexpr SourceSystem_SourceType SourceSystem::device_management;
constexpr SourceSystem_SourceType SourceSystem::security_software;
constexpr SourceSystem_SourceType SourceSystem::password_manager;
constexpr SourceSystem_SourceType SourceSystem::communication;
constexpr SourceSystem_SourceType SourceSystem::human_resources;
constexpr SourceSystem_SourceType SourceSystem::content_management_system;
constexpr SourceSystem_SourceType SourceSystem::ticketing;
constexpr SourceSystem_SourceType SourceSystem::customer_relationship_management;
constexpr SourceSystem_SourceType SourceSystem::finance;
constexpr SourceSystem_SourceType SourceSystem::analytics;
constexpr SourceSystem_SourceType SourceSystem::SourceType_MIN;
constexpr SourceSystem_SourceType SourceSystem::SourceType_MAX;
constexpr int SourceSystem::SourceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperatingSystem_OperatingSystems_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_io_2fopenisms_2fapi_2eproto);
  return file_level_enum_descriptors_io_2fopenisms_2fapi_2eproto[1];
}
bool OperatingSystem_OperatingSystems_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 10:
    case 11:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OperatingSystem_OperatingSystems OperatingSystem::undefined;
constexpr OperatingSystem_OperatingSystems OperatingSystem::macos;
constexpr OperatingSystem_OperatingSystems OperatingSystem::windows;
constexpr OperatingSystem_OperatingSystems OperatingSystem::linux;
constexpr OperatingSystem_OperatingSystems OperatingSystem::unix;
constexpr OperatingSystem_OperatingSystems OperatingSystem::chrome_os;
constexpr OperatingSystem_OperatingSystems OperatingSystem::ios;
constexpr OperatingSystem_OperatingSystems OperatingSystem::android;
constexpr OperatingSystem_OperatingSystems OperatingSystem::ros;
constexpr OperatingSystem_OperatingSystems OperatingSystem::other;
constexpr OperatingSystem_OperatingSystems OperatingSystem::OperatingSystems_MIN;
constexpr OperatingSystem_OperatingSystems OperatingSystem::OperatingSystems_MAX;
constexpr int OperatingSystem::OperatingSystems_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visibility_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_io_2fopenisms_2fapi_2eproto);
  return file_level_enum_descriptors_io_2fopenisms_2fapi_2eproto[2];
}
bool Visibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Event::_Internal {
 public:
  static const ::io::openisms::v1::Meta& meta(const Event* msg);
  static const ::io::openisms::v1::SourceSystem& source(const Event* msg);
};

const ::io::openisms::v1::Meta&
Event::_Internal::meta(const Event* msg) {
  return *msg->meta_;
}
const ::io::openisms::v1::SourceSystem&
Event::_Internal::source(const Event* msg) {
  return *msg->source_;
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  users_(arena),
  devices_(arena),
  repositories_(arena),
  certification_(arena),
  pentest_(arena),
  stats_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_),
      devices_(from.devices_),
      repositories_(from.repositories_),
      certification_(from.certification_),
      pentest_(from.pentest_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::io::openisms::v1::Meta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::io::openisms::v1::SourceSystem(*from.source_);
  } else {
    source_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Event)
}

inline void Event::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&meta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&meta_)) + sizeof(source_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete source_;
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  devices_.Clear();
  repositories_.Clear();
  certification_.Clear();
  pentest_.Clear();
  stats_.Clear();
  if (GetArenaForAllocation() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.openisms.v1.Meta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.SourceSystem source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.openisms.v1.User users = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.openisms.v1.PhysicalObject devices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.openisms.v1.Repository repositories = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_repositories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.openisms.v1.Certification certification = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_certification(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.openisms.v1.Pentest pentest = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pentest(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.openisms.v1.Statistics stats = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.openisms.v1.Meta meta = 1;
  if (this->_internal_has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::meta(this),
        _Internal::meta(this).GetCachedSize(), target, stream);
  }

  // .io.openisms.v1.SourceSystem source = 2;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // repeated .io.openisms.v1.User users = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_users_size()); i < n; i++) {
    const auto& repfield = this->_internal_users(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.openisms.v1.PhysicalObject devices = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.openisms.v1.Repository repositories = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_repositories_size()); i < n; i++) {
    const auto& repfield = this->_internal_repositories(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.openisms.v1.Certification certification = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_certification_size()); i < n; i++) {
    const auto& repfield = this->_internal_certification(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.openisms.v1.Pentest pentest = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pentest_size()); i < n; i++) {
    const auto& repfield = this->_internal_pentest(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.openisms.v1.Statistics stats = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.openisms.v1.User users = 3;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.openisms.v1.PhysicalObject devices = 4;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.openisms.v1.Repository repositories = 7;
  total_size += 1UL * this->_internal_repositories_size();
  for (const auto& msg : this->repositories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.openisms.v1.Certification certification = 9;
  total_size += 1UL * this->_internal_certification_size();
  for (const auto& msg : this->certification_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.openisms.v1.Pentest pentest = 11;
  total_size += 1UL * this->_internal_pentest_size();
  for (const auto& msg : this->pentest_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.openisms.v1.Statistics stats = 13;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .io.openisms.v1.Meta meta = 1;
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .io.openisms.v1.SourceSystem source = 2;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }

void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Event *>(to)->MergeFrom(
      static_cast<const Event &>(from));
}


void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Event)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  devices_.MergeFrom(from.devices_);
  repositories_.MergeFrom(from.repositories_);
  certification_.MergeFrom(from.certification_);
  pentest_.MergeFrom(from.pentest_);
  stats_.MergeFrom(from.stats_);
  if (from._internal_has_meta()) {
    _internal_mutable_meta()->::io::openisms::v1::Meta::MergeFrom(from._internal_meta());
  }
  if (from._internal_has_source()) {
    _internal_mutable_source()->::io::openisms::v1::SourceSystem::MergeFrom(from._internal_source());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  devices_.InternalSwap(&other->devices_);
  repositories_.InternalSwap(&other->repositories_);
  certification_.InternalSwap(&other->certification_);
  pentest_.InternalSwap(&other->pentest_);
  stats_.InternalSwap(&other->stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, source_)
      + sizeof(Event::source_)
      - PROTOBUF_FIELD_OFFSET(Event, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[0]);
}

// ===================================================================

class Meta::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created(const Meta* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Meta::_Internal::created(const Meta* msg) {
  return *msg->created_;
}
void Meta::clear_created() {
  if (GetArenaForAllocation() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
Meta::Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Meta)
}
Meta::Meta(const Meta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    identifier_.Set(from._internal_identifier(), 
      GetArenaForAllocation());
  }
  etag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    etag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_etag().empty()) {
    etag_.Set(from._internal_etag(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_created()) {
    created_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Meta)
}

inline void Meta::SharedCtor() {
identifier_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
etag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  etag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
created_ = nullptr;
}

Meta::~Meta() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Meta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Meta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.Destroy();
  etag_.Destroy();
  if (this != internal_default_instance()) delete created_;
}

void Meta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Meta::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Meta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_.ClearToEmpty();
  etag_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Meta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp created = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_created(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Meta.identifier"));
        } else
          goto handle_unusual;
        continue;
      // string etag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_etag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Meta.etag"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Meta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Meta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created = 1;
  if (this->_internal_has_created()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::created(this),
        _Internal::created(this).GetCachedSize(), target, stream);
  }

  // string identifier = 2;
  if (!this->_internal_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Meta.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // string etag = 3;
  if (!this->_internal_etag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_etag().data(), static_cast<int>(this->_internal_etag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Meta.etag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_etag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Meta)
  return target;
}

size_t Meta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Meta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 2;
  if (!this->_internal_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // string etag = 3;
  if (!this->_internal_etag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_etag());
  }

  // .google.protobuf.Timestamp created = 1;
  if (this->_internal_has_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Meta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Meta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Meta::GetClassData() const { return &_class_data_; }

void Meta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Meta *>(to)->MergeFrom(
      static_cast<const Meta &>(from));
}


void Meta::MergeFrom(const Meta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Meta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier().empty()) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (!from._internal_etag().empty()) {
    _internal_set_etag(from._internal_etag());
  }
  if (from._internal_has_created()) {
    _internal_mutable_created()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Meta::CopyFrom(const Meta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Meta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meta::IsInitialized() const {
  return true;
}

void Meta::InternalSwap(Meta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &etag_, lhs_arena,
      &other->etag_, rhs_arena
  );
  swap(created_, other->created_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Meta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[1]);
}

// ===================================================================

class SourceSystem::_Internal {
 public:
};

SourceSystem::SourceSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.SourceSystem)
}
SourceSystem::SourceSystem(const SourceSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    vendor_.Set(from._internal_vendor(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  logo_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    logo_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_logo_url().empty()) {
    logo_url_.Set(from._internal_logo_url(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.SourceSystem)
}

inline void SourceSystem::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vendor_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vendor_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
logo_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  logo_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

SourceSystem::~SourceSystem() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.SourceSystem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SourceSystem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  vendor_.Destroy();
  url_.Destroy();
  logo_url_.Destroy();
}

void SourceSystem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SourceSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.SourceSystem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  vendor_.ClearToEmpty();
  url_.ClearToEmpty();
  logo_url_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceSystem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.SourceSystem.name"));
        } else
          goto handle_unusual;
        continue;
      // string vendor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.SourceSystem.vendor"));
        } else
          goto handle_unusual;
        continue;
      // string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.SourceSystem.url"));
        } else
          goto handle_unusual;
        continue;
      // string logo_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_logo_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.SourceSystem.logo_url"));
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.SourceSystem.SourceType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::io::openisms::v1::SourceSystem_SourceType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SourceSystem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.SourceSystem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.SourceSystem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string vendor = 2;
  if (!this->_internal_vendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.SourceSystem.vendor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vendor(), target);
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.SourceSystem.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // string logo_url = 4;
  if (!this->_internal_logo_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logo_url().data(), static_cast<int>(this->_internal_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.SourceSystem.logo_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_logo_url(), target);
  }

  // .io.openisms.v1.SourceSystem.SourceType type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.SourceSystem)
  return target;
}

size_t SourceSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.SourceSystem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string vendor = 2;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string url = 3;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string logo_url = 4;
  if (!this->_internal_logo_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logo_url());
  }

  // .io.openisms.v1.SourceSystem.SourceType type = 5;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SourceSystem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SourceSystem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SourceSystem::GetClassData() const { return &_class_data_; }

void SourceSystem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SourceSystem *>(to)->MergeFrom(
      static_cast<const SourceSystem &>(from));
}


void SourceSystem::MergeFrom(const SourceSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.SourceSystem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_vendor().empty()) {
    _internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_logo_url().empty()) {
    _internal_set_logo_url(from._internal_logo_url());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SourceSystem::CopyFrom(const SourceSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.SourceSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceSystem::IsInitialized() const {
  return true;
}

void SourceSystem::InternalSwap(SourceSystem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vendor_, lhs_arena,
      &other->vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &logo_url_, lhs_arena,
      &other->logo_url_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceSystem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[2]);
}

// ===================================================================

class User::_Internal {
 public:
  static const ::io::openisms::v1::Person& person(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& second_factor_active(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& second_factor_enforced(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& active(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& suspended(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& disabled(const User* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& deleted(const User* msg);
  static const ::io::openisms::v1::Employment& employment(const User* msg);
};

const ::io::openisms::v1::Person&
User::_Internal::person(const User* msg) {
  return *msg->person_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
User::_Internal::second_factor_active(const User* msg) {
  return *msg->second_factor_active_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
User::_Internal::second_factor_enforced(const User* msg) {
  return *msg->second_factor_enforced_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
User::_Internal::active(const User* msg) {
  return *msg->active_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
User::_Internal::suspended(const User* msg) {
  return *msg->suspended_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
User::_Internal::disabled(const User* msg) {
  return *msg->disabled_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
User::_Internal::deleted(const User* msg) {
  return *msg->deleted_;
}
const ::io::openisms::v1::Employment&
User::_Internal::employment(const User* msg) {
  return *msg->employment_;
}
void User::clear_second_factor_active() {
  if (GetArenaForAllocation() == nullptr && second_factor_active_ != nullptr) {
    delete second_factor_active_;
  }
  second_factor_active_ = nullptr;
}
void User::clear_second_factor_enforced() {
  if (GetArenaForAllocation() == nullptr && second_factor_enforced_ != nullptr) {
    delete second_factor_enforced_;
  }
  second_factor_enforced_ = nullptr;
}
void User::clear_active() {
  if (GetArenaForAllocation() == nullptr && active_ != nullptr) {
    delete active_;
  }
  active_ = nullptr;
}
void User::clear_suspended() {
  if (GetArenaForAllocation() == nullptr && suspended_ != nullptr) {
    delete suspended_;
  }
  suspended_ = nullptr;
}
void User::clear_disabled() {
  if (GetArenaForAllocation() == nullptr && disabled_ != nullptr) {
    delete disabled_;
  }
  disabled_ = nullptr;
}
void User::clear_deleted() {
  if (GetArenaForAllocation() == nullptr && deleted_ != nullptr) {
    delete deleted_;
  }
  deleted_ = nullptr;
}
User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  groups_(arena),
  privileges_(arena),
  connected_accounts_(arena),
  possessions_(arena),
  tags_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_),
      privileges_(from.privileges_),
      connected_accounts_(from.connected_accounts_),
      possessions_(from.possessions_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_person()) {
    person_ = new ::io::openisms::v1::Person(*from.person_);
  } else {
    person_ = nullptr;
  }
  if (from._internal_has_second_factor_active()) {
    second_factor_active_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.second_factor_active_);
  } else {
    second_factor_active_ = nullptr;
  }
  if (from._internal_has_second_factor_enforced()) {
    second_factor_enforced_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.second_factor_enforced_);
  } else {
    second_factor_enforced_ = nullptr;
  }
  if (from._internal_has_active()) {
    active_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.active_);
  } else {
    active_ = nullptr;
  }
  if (from._internal_has_suspended()) {
    suspended_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.suspended_);
  } else {
    suspended_ = nullptr;
  }
  if (from._internal_has_disabled()) {
    disabled_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.disabled_);
  } else {
    disabled_ = nullptr;
  }
  if (from._internal_has_deleted()) {
    deleted_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.deleted_);
  } else {
    deleted_ = nullptr;
  }
  if (from._internal_has_employment()) {
    employment_ = new ::io::openisms::v1::Employment(*from.employment_);
  } else {
    employment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.User)
}

inline void User::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&person_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&employment_) -
    reinterpret_cast<char*>(&person_)) + sizeof(employment_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.User)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete person_;
  if (this != internal_default_instance()) delete second_factor_active_;
  if (this != internal_default_instance()) delete second_factor_enforced_;
  if (this != internal_default_instance()) delete active_;
  if (this != internal_default_instance()) delete suspended_;
  if (this != internal_default_instance()) delete disabled_;
  if (this != internal_default_instance()) delete deleted_;
  if (this != internal_default_instance()) delete employment_;
}

void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  privileges_.Clear();
  connected_accounts_.Clear();
  possessions_.Clear();
  tags_.Clear();
  if (GetArenaForAllocation() == nullptr && person_ != nullptr) {
    delete person_;
  }
  person_ = nullptr;
  if (GetArenaForAllocation() == nullptr && second_factor_active_ != nullptr) {
    delete second_factor_active_;
  }
  second_factor_active_ = nullptr;
  if (GetArenaForAllocation() == nullptr && second_factor_enforced_ != nullptr) {
    delete second_factor_enforced_;
  }
  second_factor_enforced_ = nullptr;
  if (GetArenaForAllocation() == nullptr && active_ != nullptr) {
    delete active_;
  }
  active_ = nullptr;
  if (GetArenaForAllocation() == nullptr && suspended_ != nullptr) {
    delete suspended_;
  }
  suspended_ = nullptr;
  if (GetArenaForAllocation() == nullptr && disabled_ != nullptr) {
    delete disabled_;
  }
  disabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && deleted_ != nullptr) {
    delete deleted_;
  }
  deleted_ = nullptr;
  if (GetArenaForAllocation() == nullptr && employment_ != nullptr) {
    delete employment_;
  }
  employment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.openisms.v1.Person person = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_person(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue second_factor_active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_second_factor_active(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue second_factor_enforced = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_second_factor_enforced(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue active = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_active(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue suspended = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_suspended(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue disabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_disabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue deleted = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_deleted(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string groups = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_groups();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.User.groups"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string privileges = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_privileges();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.User.privileges"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.Employment employment = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_employment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.openisms.v1.ConnectedAccount connected_accounts = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_connected_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.openisms.v1.PhysicalObject possessions = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_possessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.User.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.openisms.v1.Person person = 1;
  if (this->_internal_has_person()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::person(this),
        _Internal::person(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue second_factor_active = 5;
  if (this->_internal_has_second_factor_active()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::second_factor_active(this),
        _Internal::second_factor_active(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue second_factor_enforced = 6;
  if (this->_internal_has_second_factor_enforced()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::second_factor_enforced(this),
        _Internal::second_factor_enforced(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue active = 7;
  if (this->_internal_has_active()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::active(this),
        _Internal::active(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue suspended = 8;
  if (this->_internal_has_suspended()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::suspended(this),
        _Internal::suspended(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue disabled = 9;
  if (this->_internal_has_disabled()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::disabled(this),
        _Internal::disabled(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue deleted = 10;
  if (this->_internal_has_deleted()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::deleted(this),
        _Internal::deleted(this).GetCachedSize(), target, stream);
  }

  // repeated string groups = 15;
  for (int i = 0, n = this->_internal_groups_size(); i < n; i++) {
    const auto& s = this->_internal_groups(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.User.groups");
    target = stream->WriteString(15, s, target);
  }

  // repeated string privileges = 16;
  for (int i = 0, n = this->_internal_privileges_size(); i < n; i++) {
    const auto& s = this->_internal_privileges(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.User.privileges");
    target = stream->WriteString(16, s, target);
  }

  // .io.openisms.v1.Employment employment = 20;
  if (this->_internal_has_employment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::employment(this),
        _Internal::employment(this).GetCachedSize(), target, stream);
  }

  // repeated .io.openisms.v1.ConnectedAccount connected_accounts = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_connected_accounts_size()); i < n; i++) {
    const auto& repfield = this->_internal_connected_accounts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.openisms.v1.PhysicalObject possessions = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_possessions_size()); i < n; i++) {
    const auto& repfield = this->_internal_possessions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string tags = 40;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.User.tags");
    target = stream->WriteString(40, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string groups = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(groups_.size());
  for (int i = 0, n = groups_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      groups_.Get(i));
  }

  // repeated string privileges = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(privileges_.size());
  for (int i = 0, n = privileges_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      privileges_.Get(i));
  }

  // repeated .io.openisms.v1.ConnectedAccount connected_accounts = 21;
  total_size += 2UL * this->_internal_connected_accounts_size();
  for (const auto& msg : this->connected_accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.openisms.v1.PhysicalObject possessions = 22;
  total_size += 2UL * this->_internal_possessions_size();
  for (const auto& msg : this->possessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string tags = 40;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // .io.openisms.v1.Person person = 1;
  if (this->_internal_has_person()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *person_);
  }

  // .google.protobuf.BoolValue second_factor_active = 5;
  if (this->_internal_has_second_factor_active()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *second_factor_active_);
  }

  // .google.protobuf.BoolValue second_factor_enforced = 6;
  if (this->_internal_has_second_factor_enforced()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *second_factor_enforced_);
  }

  // .google.protobuf.BoolValue active = 7;
  if (this->_internal_has_active()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *active_);
  }

  // .google.protobuf.BoolValue suspended = 8;
  if (this->_internal_has_suspended()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *suspended_);
  }

  // .google.protobuf.BoolValue disabled = 9;
  if (this->_internal_has_disabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disabled_);
  }

  // .google.protobuf.BoolValue deleted = 10;
  if (this->_internal_has_deleted()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deleted_);
  }

  // .io.openisms.v1.Employment employment = 20;
  if (this->_internal_has_employment()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *employment_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User::GetClassData() const { return &_class_data_; }

void User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User *>(to)->MergeFrom(
      static_cast<const User &>(from));
}


void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.User)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  privileges_.MergeFrom(from.privileges_);
  connected_accounts_.MergeFrom(from.connected_accounts_);
  possessions_.MergeFrom(from.possessions_);
  tags_.MergeFrom(from.tags_);
  if (from._internal_has_person()) {
    _internal_mutable_person()->::io::openisms::v1::Person::MergeFrom(from._internal_person());
  }
  if (from._internal_has_second_factor_active()) {
    _internal_mutable_second_factor_active()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_second_factor_active());
  }
  if (from._internal_has_second_factor_enforced()) {
    _internal_mutable_second_factor_enforced()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_second_factor_enforced());
  }
  if (from._internal_has_active()) {
    _internal_mutable_active()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_active());
  }
  if (from._internal_has_suspended()) {
    _internal_mutable_suspended()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_suspended());
  }
  if (from._internal_has_disabled()) {
    _internal_mutable_disabled()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_disabled());
  }
  if (from._internal_has_deleted()) {
    _internal_mutable_deleted()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_deleted());
  }
  if (from._internal_has_employment()) {
    _internal_mutable_employment()->::io::openisms::v1::Employment::MergeFrom(from._internal_employment());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
  privileges_.InternalSwap(&other->privileges_);
  connected_accounts_.InternalSwap(&other->connected_accounts_);
  possessions_.InternalSwap(&other->possessions_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User, employment_)
      + sizeof(User::employment_)
      - PROTOBUF_FIELD_OFFSET(User, person_)>(
          reinterpret_cast<char*>(&person_),
          reinterpret_cast<char*>(&other->person_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[3]);
}

// ===================================================================

class Person::_Internal {
 public:
  static const ::io::openisms::v1::Name& name(const Person* msg);
  static const ::io::openisms::v1::UrlWithEtag& picture(const Person* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created(const Person* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated(const Person* msg);
};

const ::io::openisms::v1::Name&
Person::_Internal::name(const Person* msg) {
  return *msg->name_;
}
const ::io::openisms::v1::UrlWithEtag&
Person::_Internal::picture(const Person* msg) {
  return *msg->picture_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Person::_Internal::created(const Person* msg) {
  return *msg->created_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Person::_Internal::updated(const Person* msg) {
  return *msg->updated_;
}
void Person::clear_created() {
  if (GetArenaForAllocation() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
void Person::clear_updated() {
  if (GetArenaForAllocation() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
}
Person::Person(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  other_emails_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Person)
}
Person::Person(const Person& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      other_emails_(from.other_emails_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  primary_email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    primary_email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_primary_email().empty()) {
    primary_email_.Set(from._internal_primary_email(), 
      GetArenaForAllocation());
  }
  company_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    company_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_company().empty()) {
    company_.Set(from._internal_company(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_name()) {
    name_ = new ::io::openisms::v1::Name(*from.name_);
  } else {
    name_ = nullptr;
  }
  if (from._internal_has_picture()) {
    picture_ = new ::io::openisms::v1::UrlWithEtag(*from.picture_);
  } else {
    picture_ = nullptr;
  }
  if (from._internal_has_created()) {
    created_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  if (from._internal_has_updated()) {
    updated_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_);
  } else {
    updated_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Person)
}

inline void Person::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
primary_email_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  primary_email_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
company_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  company_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&updated_) -
    reinterpret_cast<char*>(&name_)) + sizeof(updated_));
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Person)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Person::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  primary_email_.Destroy();
  company_.Destroy();
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete picture_;
  if (this != internal_default_instance()) delete created_;
  if (this != internal_default_instance()) delete updated_;
}

void Person::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Person)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_emails_.Clear();
  id_.ClearToEmpty();
  primary_email_.ClearToEmpty();
  company_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && picture_ != nullptr) {
    delete picture_;
  }
  picture_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  if (GetArenaForAllocation() == nullptr && updated_ != nullptr) {
    delete updated_;
  }
  updated_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Person::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Person.id"));
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.Name name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string primary_email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_primary_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Person.primary_email"));
        } else
          goto handle_unusual;
        continue;
      // repeated string other_emails = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_other_emails();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Person.other_emails"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.UrlWithEtag picture = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_picture(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string company = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_company();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Person.company"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_created(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Person::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Person)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Person.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .io.openisms.v1.Name name = 2;
  if (this->_internal_has_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::name(this),
        _Internal::name(this).GetCachedSize(), target, stream);
  }

  // string primary_email = 3;
  if (!this->_internal_primary_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_email().data(), static_cast<int>(this->_internal_primary_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Person.primary_email");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_primary_email(), target);
  }

  // repeated string other_emails = 4;
  for (int i = 0, n = this->_internal_other_emails_size(); i < n; i++) {
    const auto& s = this->_internal_other_emails(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Person.other_emails");
    target = stream->WriteString(4, s, target);
  }

  // .io.openisms.v1.UrlWithEtag picture = 5;
  if (this->_internal_has_picture()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::picture(this),
        _Internal::picture(this).GetCachedSize(), target, stream);
  }

  // string company = 6;
  if (!this->_internal_company().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company().data(), static_cast<int>(this->_internal_company().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Person.company");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_company(), target);
  }

  // .google.protobuf.Timestamp created = 10;
  if (this->_internal_has_created()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::created(this),
        _Internal::created(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp updated = 11;
  if (this->_internal_has_updated()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::updated(this),
        _Internal::updated(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Person)
  return target;
}

size_t Person::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Person)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string other_emails = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(other_emails_.size());
  for (int i = 0, n = other_emails_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      other_emails_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string primary_email = 3;
  if (!this->_internal_primary_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_email());
  }

  // string company = 6;
  if (!this->_internal_company().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company());
  }

  // .io.openisms.v1.Name name = 2;
  if (this->_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  // .io.openisms.v1.UrlWithEtag picture = 5;
  if (this->_internal_has_picture()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *picture_);
  }

  // .google.protobuf.Timestamp created = 10;
  if (this->_internal_has_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // .google.protobuf.Timestamp updated = 11;
  if (this->_internal_has_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Person::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Person::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Person::GetClassData() const { return &_class_data_; }

void Person::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Person *>(to)->MergeFrom(
      static_cast<const Person &>(from));
}


void Person::MergeFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Person)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  other_emails_.MergeFrom(from.other_emails_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_primary_email().empty()) {
    _internal_set_primary_email(from._internal_primary_email());
  }
  if (!from._internal_company().empty()) {
    _internal_set_company(from._internal_company());
  }
  if (from._internal_has_name()) {
    _internal_mutable_name()->::io::openisms::v1::Name::MergeFrom(from._internal_name());
  }
  if (from._internal_has_picture()) {
    _internal_mutable_picture()->::io::openisms::v1::UrlWithEtag::MergeFrom(from._internal_picture());
  }
  if (from._internal_has_created()) {
    _internal_mutable_created()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created());
  }
  if (from._internal_has_updated()) {
    _internal_mutable_updated()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {
  return true;
}

void Person::InternalSwap(Person* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  other_emails_.InternalSwap(&other->other_emails_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &primary_email_, lhs_arena,
      &other->primary_email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &company_, lhs_arena,
      &other->company_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Person, updated_)
      + sizeof(Person::updated_)
      - PROTOBUF_FIELD_OFFSET(Person, name_)>(
          reinterpret_cast<char*>(&name_),
          reinterpret_cast<char*>(&other->name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Person::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[4]);
}

// ===================================================================

class Name::_Internal {
 public:
};

Name::Name(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Name)
}
Name::Name(const Name& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  given_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    given_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_given_name().empty()) {
    given_name_.Set(from._internal_given_name(), 
      GetArenaForAllocation());
  }
  family_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    family_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_family_name().empty()) {
    family_name_.Set(from._internal_family_name(), 
      GetArenaForAllocation());
  }
  full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_full_name().empty()) {
    full_name_.Set(from._internal_full_name(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  position_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    position_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position().empty()) {
    position_.Set(from._internal_position(), 
      GetArenaForAllocation());
  }
  role_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    role_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    role_.Set(from._internal_role(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Name)
}

inline void Name::SharedCtor() {
given_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  given_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
family_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  family_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
full_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  full_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
position_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  position_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
role_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  role_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Name::~Name() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Name)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Name::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  given_name_.Destroy();
  family_name_.Destroy();
  full_name_.Destroy();
  title_.Destroy();
  position_.Destroy();
  role_.Destroy();
}

void Name::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Name::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Name)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  given_name_.ClearToEmpty();
  family_name_.ClearToEmpty();
  full_name_.ClearToEmpty();
  title_.ClearToEmpty();
  position_.ClearToEmpty();
  role_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Name::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string given_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_given_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Name.given_name"));
        } else
          goto handle_unusual;
        continue;
      // string family_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_family_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Name.family_name"));
        } else
          goto handle_unusual;
        continue;
      // string full_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_full_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Name.full_name"));
        } else
          goto handle_unusual;
        continue;
      // string title = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Name.title"));
        } else
          goto handle_unusual;
        continue;
      // string position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_position();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Name.position"));
        } else
          goto handle_unusual;
        continue;
      // string role = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_role();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Name.role"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Name::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Name)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string given_name = 1;
  if (!this->_internal_given_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_given_name().data(), static_cast<int>(this->_internal_given_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Name.given_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_given_name(), target);
  }

  // string family_name = 2;
  if (!this->_internal_family_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_family_name().data(), static_cast<int>(this->_internal_family_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Name.family_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_family_name(), target);
  }

  // string full_name = 3;
  if (!this->_internal_full_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Name.full_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_full_name(), target);
  }

  // string title = 4;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Name.title");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_title(), target);
  }

  // string position = 5;
  if (!this->_internal_position().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position().data(), static_cast<int>(this->_internal_position().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Name.position");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_position(), target);
  }

  // string role = 6;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Name.role");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Name)
  return target;
}

size_t Name::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Name)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string given_name = 1;
  if (!this->_internal_given_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_given_name());
  }

  // string family_name = 2;
  if (!this->_internal_family_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_family_name());
  }

  // string full_name = 3;
  if (!this->_internal_full_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full_name());
  }

  // string title = 4;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string position = 5;
  if (!this->_internal_position().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position());
  }

  // string role = 6;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Name::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Name::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Name::GetClassData() const { return &_class_data_; }

void Name::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Name *>(to)->MergeFrom(
      static_cast<const Name &>(from));
}


void Name::MergeFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Name)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_given_name().empty()) {
    _internal_set_given_name(from._internal_given_name());
  }
  if (!from._internal_family_name().empty()) {
    _internal_set_family_name(from._internal_family_name());
  }
  if (!from._internal_full_name().empty()) {
    _internal_set_full_name(from._internal_full_name());
  }
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_position().empty()) {
    _internal_set_position(from._internal_position());
  }
  if (!from._internal_role().empty()) {
    _internal_set_role(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Name::CopyFrom(const Name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Name::IsInitialized() const {
  return true;
}

void Name::InternalSwap(Name* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &given_name_, lhs_arena,
      &other->given_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &family_name_, lhs_arena,
      &other->family_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &full_name_, lhs_arena,
      &other->full_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &position_, lhs_arena,
      &other->position_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &role_, lhs_arena,
      &other->role_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Name::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[5]);
}

// ===================================================================

class UrlWithEtag::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_modified(const UrlWithEtag* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UrlWithEtag::_Internal::last_modified(const UrlWithEtag* msg) {
  return *msg->last_modified_;
}
void UrlWithEtag::clear_last_modified() {
  if (GetArenaForAllocation() == nullptr && last_modified_ != nullptr) {
    delete last_modified_;
  }
  last_modified_ = nullptr;
}
UrlWithEtag::UrlWithEtag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.UrlWithEtag)
}
UrlWithEtag::UrlWithEtag(const UrlWithEtag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  etag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    etag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_etag().empty()) {
    etag_.Set(from._internal_etag(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_last_modified()) {
    last_modified_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_modified_);
  } else {
    last_modified_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.UrlWithEtag)
}

inline void UrlWithEtag::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
etag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  etag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_modified_ = nullptr;
}

UrlWithEtag::~UrlWithEtag() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.UrlWithEtag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UrlWithEtag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  etag_.Destroy();
  if (this != internal_default_instance()) delete last_modified_;
}

void UrlWithEtag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UrlWithEtag::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.UrlWithEtag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmpty();
  etag_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && last_modified_ != nullptr) {
    delete last_modified_;
  }
  last_modified_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UrlWithEtag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.UrlWithEtag.url"));
        } else
          goto handle_unusual;
        continue;
      // string etag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_etag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.UrlWithEtag.etag"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_modified = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_modified(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UrlWithEtag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.UrlWithEtag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.UrlWithEtag.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // string etag = 2;
  if (!this->_internal_etag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_etag().data(), static_cast<int>(this->_internal_etag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.UrlWithEtag.etag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_etag(), target);
  }

  // .google.protobuf.Timestamp last_modified = 3;
  if (this->_internal_has_last_modified()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::last_modified(this),
        _Internal::last_modified(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.UrlWithEtag)
  return target;
}

size_t UrlWithEtag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.UrlWithEtag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string etag = 2;
  if (!this->_internal_etag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_etag());
  }

  // .google.protobuf.Timestamp last_modified = 3;
  if (this->_internal_has_last_modified()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_modified_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UrlWithEtag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UrlWithEtag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UrlWithEtag::GetClassData() const { return &_class_data_; }

void UrlWithEtag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UrlWithEtag *>(to)->MergeFrom(
      static_cast<const UrlWithEtag &>(from));
}


void UrlWithEtag::MergeFrom(const UrlWithEtag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.UrlWithEtag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_etag().empty()) {
    _internal_set_etag(from._internal_etag());
  }
  if (from._internal_has_last_modified()) {
    _internal_mutable_last_modified()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_modified());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UrlWithEtag::CopyFrom(const UrlWithEtag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.UrlWithEtag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlWithEtag::IsInitialized() const {
  return true;
}

void UrlWithEtag::InternalSwap(UrlWithEtag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &etag_, lhs_arena,
      &other->etag_, rhs_arena
  );
  swap(last_modified_, other->last_modified_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UrlWithEtag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[6]);
}

// ===================================================================

class Employment::_Internal {
 public:
  static const ::io::openisms::v1::Date& begin(const Employment* msg);
  static const ::io::openisms::v1::Date& end(const Employment* msg);
};

const ::io::openisms::v1::Date&
Employment::_Internal::begin(const Employment* msg) {
  return *msg->begin_;
}
const ::io::openisms::v1::Date&
Employment::_Internal::end(const Employment* msg) {
  return *msg->end_;
}
Employment::Employment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Employment)
}
Employment::Employment(const Employment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contract_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    contract_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract().empty()) {
    contract_.Set(from._internal_contract(), 
      GetArenaForAllocation());
  }
  status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_begin()) {
    begin_ = new ::io::openisms::v1::Date(*from.begin_);
  } else {
    begin_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::io::openisms::v1::Date(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Employment)
}

inline void Employment::SharedCtor() {
contract_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  contract_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&begin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(end_));
}

Employment::~Employment() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Employment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Employment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contract_.Destroy();
  status_.Destroy();
  if (this != internal_default_instance()) delete begin_;
  if (this != internal_default_instance()) delete end_;
}

void Employment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Employment::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Employment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contract_.ClearToEmpty();
  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && begin_ != nullptr) {
    delete begin_;
  }
  begin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Employment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contract = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contract();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Employment.contract"));
        } else
          goto handle_unusual;
        continue;
      // string status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Employment.status"));
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.Date begin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.Date end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Employment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Employment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract = 1;
  if (!this->_internal_contract().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract().data(), static_cast<int>(this->_internal_contract().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Employment.contract");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract(), target);
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Employment.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // .io.openisms.v1.Date begin = 3;
  if (this->_internal_has_begin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::begin(this),
        _Internal::begin(this).GetCachedSize(), target, stream);
  }

  // .io.openisms.v1.Date end = 4;
  if (this->_internal_has_end()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Employment)
  return target;
}

size_t Employment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Employment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contract = 1;
  if (!this->_internal_contract().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract());
  }

  // string status = 2;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .io.openisms.v1.Date begin = 3;
  if (this->_internal_has_begin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *begin_);
  }

  // .io.openisms.v1.Date end = 4;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Employment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Employment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Employment::GetClassData() const { return &_class_data_; }

void Employment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Employment *>(to)->MergeFrom(
      static_cast<const Employment &>(from));
}


void Employment::MergeFrom(const Employment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Employment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contract().empty()) {
    _internal_set_contract(from._internal_contract());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_begin()) {
    _internal_mutable_begin()->::io::openisms::v1::Date::MergeFrom(from._internal_begin());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::io::openisms::v1::Date::MergeFrom(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Employment::CopyFrom(const Employment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Employment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Employment::IsInitialized() const {
  return true;
}

void Employment::InternalSwap(Employment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &contract_, lhs_arena,
      &other->contract_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Employment, end_)
      + sizeof(Employment::end_)
      - PROTOBUF_FIELD_OFFSET(Employment, begin_)>(
          reinterpret_cast<char*>(&begin_),
          reinterpret_cast<char*>(&other->begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Employment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[7]);
}

// ===================================================================

class ConnectedAccount::_Internal {
 public:
};

ConnectedAccount::ConnectedAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  scopes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.ConnectedAccount)
}
ConnectedAccount::ConnectedAccount(const ConnectedAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scopes_(from.scopes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(from._internal_app_id(), 
      GetArenaForAllocation());
  }
  app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_name().empty()) {
    app_name_.Set(from._internal_app_name(), 
      GetArenaForAllocation());
  }
  app_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_type().empty()) {
    app_type_.Set(from._internal_app_type(), 
      GetArenaForAllocation());
  }
  app_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_url().empty()) {
    app_url_.Set(from._internal_app_url(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.ConnectedAccount)
}

inline void ConnectedAccount::SharedCtor() {
app_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectedAccount::~ConnectedAccount() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.ConnectedAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectedAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.Destroy();
  app_name_.Destroy();
  app_type_.Destroy();
  app_url_.Destroy();
  user_id_.Destroy();
}

void ConnectedAccount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectedAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.ConnectedAccount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scopes_.Clear();
  app_id_.ClearToEmpty();
  app_name_.ClearToEmpty();
  app_type_.ClearToEmpty();
  app_url_.ClearToEmpty();
  user_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectedAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.ConnectedAccount.app_id"));
        } else
          goto handle_unusual;
        continue;
      // string app_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.ConnectedAccount.app_name"));
        } else
          goto handle_unusual;
        continue;
      // string app_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_app_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.ConnectedAccount.app_type"));
        } else
          goto handle_unusual;
        continue;
      // string app_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.ConnectedAccount.app_url"));
        } else
          goto handle_unusual;
        continue;
      // string user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.ConnectedAccount.user_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string scopes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_scopes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.ConnectedAccount.scopes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectedAccount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.ConnectedAccount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.ConnectedAccount.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string app_name = 2;
  if (!this->_internal_app_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.ConnectedAccount.app_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_name(), target);
  }

  // string app_type = 3;
  if (!this->_internal_app_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_type().data(), static_cast<int>(this->_internal_app_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.ConnectedAccount.app_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_app_type(), target);
  }

  // string app_url = 4;
  if (!this->_internal_app_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_url().data(), static_cast<int>(this->_internal_app_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.ConnectedAccount.app_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_url(), target);
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.ConnectedAccount.user_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_user_id(), target);
  }

  // repeated string scopes = 6;
  for (int i = 0, n = this->_internal_scopes_size(); i < n; i++) {
    const auto& s = this->_internal_scopes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.ConnectedAccount.scopes");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.ConnectedAccount)
  return target;
}

size_t ConnectedAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.ConnectedAccount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string scopes = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(scopes_.size());
  for (int i = 0, n = scopes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      scopes_.Get(i));
  }

  // string app_id = 1;
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string app_name = 2;
  if (!this->_internal_app_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());
  }

  // string app_type = 3;
  if (!this->_internal_app_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_type());
  }

  // string app_url = 4;
  if (!this->_internal_app_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_url());
  }

  // string user_id = 5;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectedAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConnectedAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectedAccount::GetClassData() const { return &_class_data_; }

void ConnectedAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConnectedAccount *>(to)->MergeFrom(
      static_cast<const ConnectedAccount &>(from));
}


void ConnectedAccount::MergeFrom(const ConnectedAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.ConnectedAccount)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  scopes_.MergeFrom(from.scopes_);
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_app_name().empty()) {
    _internal_set_app_name(from._internal_app_name());
  }
  if (!from._internal_app_type().empty()) {
    _internal_set_app_type(from._internal_app_type());
  }
  if (!from._internal_app_url().empty()) {
    _internal_set_app_url(from._internal_app_url());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectedAccount::CopyFrom(const ConnectedAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.ConnectedAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectedAccount::IsInitialized() const {
  return true;
}

void ConnectedAccount::InternalSwap(ConnectedAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  scopes_.InternalSwap(&other->scopes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_name_, lhs_arena,
      &other->app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_type_, lhs_arena,
      &other->app_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_url_, lhs_arena,
      &other->app_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectedAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[8]);
}

// ===================================================================

class PhysicalObject::_Internal {
 public:
  static const ::io::openisms::v1::OperatingSystem& os(const PhysicalObject* msg);
  static const ::io::openisms::v1::SecurityFeatures& security(const PhysicalObject* msg);
};

const ::io::openisms::v1::OperatingSystem&
PhysicalObject::_Internal::os(const PhysicalObject* msg) {
  return *msg->os_;
}
const ::io::openisms::v1::SecurityFeatures&
PhysicalObject::_Internal::security(const PhysicalObject* msg) {
  return *msg->security_;
}
PhysicalObject::PhysicalObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  networks_(arena),
  user_accounts_(arena),
  profiles_(arena),
  apps_(arena),
  tags_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.PhysicalObject)
}
PhysicalObject::PhysicalObject(const PhysicalObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      networks_(from.networks_),
      user_accounts_(from.user_accounts_),
      profiles_(from.profiles_),
      apps_(from.apps_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  manufacturer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    manufacturer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_manufacturer().empty()) {
    manufacturer_.Set(from._internal_manufacturer(), 
      GetArenaForAllocation());
  }
  vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    vendor_.Set(from._internal_vendor(), 
      GetArenaForAllocation());
  }
  identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    identifier_.Set(from._internal_identifier(), 
      GetArenaForAllocation());
  }
  serial_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serial_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial_number().empty()) {
    serial_number_.Set(from._internal_serial_number(), 
      GetArenaForAllocation());
  }
  imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_imei().empty()) {
    imei_.Set(from._internal_imei(), 
      GetArenaForAllocation());
  }
  meid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    meid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_meid().empty()) {
    meid_.Set(from._internal_meid(), 
      GetArenaForAllocation());
  }
  hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    hostname_.Set(from._internal_hostname(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_os()) {
    os_ = new ::io::openisms::v1::OperatingSystem(*from.os_);
  } else {
    os_ = nullptr;
  }
  if (from._internal_has_security()) {
    security_ = new ::io::openisms::v1::SecurityFeatures(*from.security_);
  } else {
    security_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.PhysicalObject)
}

inline void PhysicalObject::SharedCtor() {
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
manufacturer_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  manufacturer_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vendor_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vendor_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
identifier_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serial_number_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serial_number_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
imei_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  imei_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
meid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  meid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hostname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&os_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&security_) -
    reinterpret_cast<char*>(&os_)) + sizeof(security_));
}

PhysicalObject::~PhysicalObject() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.PhysicalObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PhysicalObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.Destroy();
  name_.Destroy();
  manufacturer_.Destroy();
  vendor_.Destroy();
  identifier_.Destroy();
  serial_number_.Destroy();
  imei_.Destroy();
  meid_.Destroy();
  hostname_.Destroy();
  if (this != internal_default_instance()) delete os_;
  if (this != internal_default_instance()) delete security_;
}

void PhysicalObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PhysicalObject::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.PhysicalObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  networks_.Clear();
  user_accounts_.Clear();
  profiles_.Clear();
  apps_.Clear();
  tags_.Clear();
  type_.ClearToEmpty();
  name_.ClearToEmpty();
  manufacturer_.ClearToEmpty();
  vendor_.ClearToEmpty();
  identifier_.ClearToEmpty();
  serial_number_.ClearToEmpty();
  imei_.ClearToEmpty();
  meid_.ClearToEmpty();
  hostname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && os_ != nullptr) {
    delete os_;
  }
  os_ = nullptr;
  if (GetArenaForAllocation() == nullptr && security_ != nullptr) {
    delete security_;
  }
  security_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PhysicalObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.PhysicalObject.type"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.PhysicalObject.name"));
        } else
          goto handle_unusual;
        continue;
      // string manufacturer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.PhysicalObject.manufacturer"));
        } else
          goto handle_unusual;
        continue;
      // string vendor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.PhysicalObject.vendor"));
        } else
          goto handle_unusual;
        continue;
      // string identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.PhysicalObject.identifier"));
        } else
          goto handle_unusual;
        continue;
      // string serial_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.PhysicalObject.serial_number"));
        } else
          goto handle_unusual;
        continue;
      // string imei = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_imei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.PhysicalObject.imei"));
        } else
          goto handle_unusual;
        continue;
      // string meid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_meid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.PhysicalObject.meid"));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.openisms.v1.Network networks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_networks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string hostname = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.PhysicalObject.hostname"));
        } else
          goto handle_unusual;
        continue;
      // repeated string user_accounts = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_user_accounts();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.PhysicalObject.user_accounts"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.OperatingSystem os = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_os(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.SecurityFeatures security = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_security(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .io.openisms.v1.Profile profiles = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_profiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.openisms.v1.Application apps = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_apps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.PhysicalObject.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PhysicalObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.PhysicalObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.PhysicalObject.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.PhysicalObject.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string manufacturer = 3;
  if (!this->_internal_manufacturer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.PhysicalObject.manufacturer");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_manufacturer(), target);
  }

  // string vendor = 4;
  if (!this->_internal_vendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.PhysicalObject.vendor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_vendor(), target);
  }

  // string identifier = 5;
  if (!this->_internal_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.PhysicalObject.identifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_identifier(), target);
  }

  // string serial_number = 6;
  if (!this->_internal_serial_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.PhysicalObject.serial_number");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_serial_number(), target);
  }

  // string imei = 7;
  if (!this->_internal_imei().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.PhysicalObject.imei");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_imei(), target);
  }

  // string meid = 8;
  if (!this->_internal_meid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_meid().data(), static_cast<int>(this->_internal_meid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.PhysicalObject.meid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_meid(), target);
  }

  // repeated .io.openisms.v1.Network networks = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_networks_size()); i < n; i++) {
    const auto& repfield = this->_internal_networks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string hostname = 10;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.PhysicalObject.hostname");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_hostname(), target);
  }

  // repeated string user_accounts = 11;
  for (int i = 0, n = this->_internal_user_accounts_size(); i < n; i++) {
    const auto& s = this->_internal_user_accounts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.PhysicalObject.user_accounts");
    target = stream->WriteString(11, s, target);
  }

  // .io.openisms.v1.OperatingSystem os = 12;
  if (this->_internal_has_os()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::os(this),
        _Internal::os(this).GetCachedSize(), target, stream);
  }

  // .io.openisms.v1.SecurityFeatures security = 13;
  if (this->_internal_has_security()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::security(this),
        _Internal::security(this).GetCachedSize(), target, stream);
  }

  // repeated .io.openisms.v1.Profile profiles = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_profiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_profiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .io.openisms.v1.Application apps = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_apps_size()); i < n; i++) {
    const auto& repfield = this->_internal_apps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string tags = 20;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.PhysicalObject.tags");
    target = stream->WriteString(20, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.PhysicalObject)
  return target;
}

size_t PhysicalObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.PhysicalObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.openisms.v1.Network networks = 9;
  total_size += 1UL * this->_internal_networks_size();
  for (const auto& msg : this->networks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string user_accounts = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_accounts_.size());
  for (int i = 0, n = user_accounts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      user_accounts_.Get(i));
  }

  // repeated .io.openisms.v1.Profile profiles = 14;
  total_size += 1UL * this->_internal_profiles_size();
  for (const auto& msg : this->profiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.openisms.v1.Application apps = 15;
  total_size += 1UL * this->_internal_apps_size();
  for (const auto& msg : this->apps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string tags = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string manufacturer = 3;
  if (!this->_internal_manufacturer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturer());
  }

  // string vendor = 4;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string identifier = 5;
  if (!this->_internal_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // string serial_number = 6;
  if (!this->_internal_serial_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());
  }

  // string imei = 7;
  if (!this->_internal_imei().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_imei());
  }

  // string meid = 8;
  if (!this->_internal_meid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_meid());
  }

  // string hostname = 10;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // .io.openisms.v1.OperatingSystem os = 12;
  if (this->_internal_has_os()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *os_);
  }

  // .io.openisms.v1.SecurityFeatures security = 13;
  if (this->_internal_has_security()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *security_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PhysicalObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PhysicalObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PhysicalObject::GetClassData() const { return &_class_data_; }

void PhysicalObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PhysicalObject *>(to)->MergeFrom(
      static_cast<const PhysicalObject &>(from));
}


void PhysicalObject::MergeFrom(const PhysicalObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.PhysicalObject)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  networks_.MergeFrom(from.networks_);
  user_accounts_.MergeFrom(from.user_accounts_);
  profiles_.MergeFrom(from.profiles_);
  apps_.MergeFrom(from.apps_);
  tags_.MergeFrom(from.tags_);
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_manufacturer().empty()) {
    _internal_set_manufacturer(from._internal_manufacturer());
  }
  if (!from._internal_vendor().empty()) {
    _internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_identifier().empty()) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (!from._internal_serial_number().empty()) {
    _internal_set_serial_number(from._internal_serial_number());
  }
  if (!from._internal_imei().empty()) {
    _internal_set_imei(from._internal_imei());
  }
  if (!from._internal_meid().empty()) {
    _internal_set_meid(from._internal_meid());
  }
  if (!from._internal_hostname().empty()) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from._internal_has_os()) {
    _internal_mutable_os()->::io::openisms::v1::OperatingSystem::MergeFrom(from._internal_os());
  }
  if (from._internal_has_security()) {
    _internal_mutable_security()->::io::openisms::v1::SecurityFeatures::MergeFrom(from._internal_security());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PhysicalObject::CopyFrom(const PhysicalObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.PhysicalObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalObject::IsInitialized() const {
  return true;
}

void PhysicalObject::InternalSwap(PhysicalObject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  networks_.InternalSwap(&other->networks_);
  user_accounts_.InternalSwap(&other->user_accounts_);
  profiles_.InternalSwap(&other->profiles_);
  apps_.InternalSwap(&other->apps_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &manufacturer_, lhs_arena,
      &other->manufacturer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vendor_, lhs_arena,
      &other->vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &serial_number_, lhs_arena,
      &other->serial_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &imei_, lhs_arena,
      &other->imei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &meid_, lhs_arena,
      &other->meid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PhysicalObject, security_)
      + sizeof(PhysicalObject::security_)
      - PROTOBUF_FIELD_OFFSET(PhysicalObject, os_)>(
          reinterpret_cast<char*>(&os_),
          reinterpret_cast<char*>(&other->os_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PhysicalObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[9]);
}

// ===================================================================

class SecurityFeatures::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& activation_lock(const SecurityFeatures* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& supervised(const SecurityFeatures* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& file_vault(const SecurityFeatures* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& full_disk_encryption(const SecurityFeatures* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& secure_password(const SecurityFeatures* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& automatic_screen_lock(const SecurityFeatures* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& screen_lock_after(const SecurityFeatures* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& firewall_enabled(const SecurityFeatures* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& automatic_updates(const SecurityFeatures* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
SecurityFeatures::_Internal::activation_lock(const SecurityFeatures* msg) {
  return *msg->activation_lock_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
SecurityFeatures::_Internal::supervised(const SecurityFeatures* msg) {
  return *msg->supervised_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
SecurityFeatures::_Internal::file_vault(const SecurityFeatures* msg) {
  return *msg->file_vault_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
SecurityFeatures::_Internal::full_disk_encryption(const SecurityFeatures* msg) {
  return *msg->full_disk_encryption_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
SecurityFeatures::_Internal::secure_password(const SecurityFeatures* msg) {
  return *msg->secure_password_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
SecurityFeatures::_Internal::automatic_screen_lock(const SecurityFeatures* msg) {
  return *msg->automatic_screen_lock_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
SecurityFeatures::_Internal::screen_lock_after(const SecurityFeatures* msg) {
  return *msg->screen_lock_after_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
SecurityFeatures::_Internal::firewall_enabled(const SecurityFeatures* msg) {
  return *msg->firewall_enabled_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
SecurityFeatures::_Internal::automatic_updates(const SecurityFeatures* msg) {
  return *msg->automatic_updates_;
}
void SecurityFeatures::clear_activation_lock() {
  if (GetArenaForAllocation() == nullptr && activation_lock_ != nullptr) {
    delete activation_lock_;
  }
  activation_lock_ = nullptr;
}
void SecurityFeatures::clear_supervised() {
  if (GetArenaForAllocation() == nullptr && supervised_ != nullptr) {
    delete supervised_;
  }
  supervised_ = nullptr;
}
void SecurityFeatures::clear_file_vault() {
  if (GetArenaForAllocation() == nullptr && file_vault_ != nullptr) {
    delete file_vault_;
  }
  file_vault_ = nullptr;
}
void SecurityFeatures::clear_full_disk_encryption() {
  if (GetArenaForAllocation() == nullptr && full_disk_encryption_ != nullptr) {
    delete full_disk_encryption_;
  }
  full_disk_encryption_ = nullptr;
}
void SecurityFeatures::clear_secure_password() {
  if (GetArenaForAllocation() == nullptr && secure_password_ != nullptr) {
    delete secure_password_;
  }
  secure_password_ = nullptr;
}
void SecurityFeatures::clear_automatic_screen_lock() {
  if (GetArenaForAllocation() == nullptr && automatic_screen_lock_ != nullptr) {
    delete automatic_screen_lock_;
  }
  automatic_screen_lock_ = nullptr;
}
void SecurityFeatures::clear_screen_lock_after() {
  if (GetArenaForAllocation() == nullptr && screen_lock_after_ != nullptr) {
    delete screen_lock_after_;
  }
  screen_lock_after_ = nullptr;
}
void SecurityFeatures::clear_firewall_enabled() {
  if (GetArenaForAllocation() == nullptr && firewall_enabled_ != nullptr) {
    delete firewall_enabled_;
  }
  firewall_enabled_ = nullptr;
}
void SecurityFeatures::clear_automatic_updates() {
  if (GetArenaForAllocation() == nullptr && automatic_updates_ != nullptr) {
    delete automatic_updates_;
  }
  automatic_updates_ = nullptr;
}
SecurityFeatures::SecurityFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.SecurityFeatures)
}
SecurityFeatures::SecurityFeatures(const SecurityFeatures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_activation_lock()) {
    activation_lock_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.activation_lock_);
  } else {
    activation_lock_ = nullptr;
  }
  if (from._internal_has_supervised()) {
    supervised_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.supervised_);
  } else {
    supervised_ = nullptr;
  }
  if (from._internal_has_file_vault()) {
    file_vault_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.file_vault_);
  } else {
    file_vault_ = nullptr;
  }
  if (from._internal_has_full_disk_encryption()) {
    full_disk_encryption_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.full_disk_encryption_);
  } else {
    full_disk_encryption_ = nullptr;
  }
  if (from._internal_has_secure_password()) {
    secure_password_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.secure_password_);
  } else {
    secure_password_ = nullptr;
  }
  if (from._internal_has_automatic_screen_lock()) {
    automatic_screen_lock_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.automatic_screen_lock_);
  } else {
    automatic_screen_lock_ = nullptr;
  }
  if (from._internal_has_screen_lock_after()) {
    screen_lock_after_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from.screen_lock_after_);
  } else {
    screen_lock_after_ = nullptr;
  }
  if (from._internal_has_firewall_enabled()) {
    firewall_enabled_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.firewall_enabled_);
  } else {
    firewall_enabled_ = nullptr;
  }
  if (from._internal_has_automatic_updates()) {
    automatic_updates_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.automatic_updates_);
  } else {
    automatic_updates_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.SecurityFeatures)
}

inline void SecurityFeatures::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&activation_lock_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&automatic_updates_) -
    reinterpret_cast<char*>(&activation_lock_)) + sizeof(automatic_updates_));
}

SecurityFeatures::~SecurityFeatures() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.SecurityFeatures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecurityFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete activation_lock_;
  if (this != internal_default_instance()) delete supervised_;
  if (this != internal_default_instance()) delete file_vault_;
  if (this != internal_default_instance()) delete full_disk_encryption_;
  if (this != internal_default_instance()) delete secure_password_;
  if (this != internal_default_instance()) delete automatic_screen_lock_;
  if (this != internal_default_instance()) delete screen_lock_after_;
  if (this != internal_default_instance()) delete firewall_enabled_;
  if (this != internal_default_instance()) delete automatic_updates_;
}

void SecurityFeatures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecurityFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.SecurityFeatures)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && activation_lock_ != nullptr) {
    delete activation_lock_;
  }
  activation_lock_ = nullptr;
  if (GetArenaForAllocation() == nullptr && supervised_ != nullptr) {
    delete supervised_;
  }
  supervised_ = nullptr;
  if (GetArenaForAllocation() == nullptr && file_vault_ != nullptr) {
    delete file_vault_;
  }
  file_vault_ = nullptr;
  if (GetArenaForAllocation() == nullptr && full_disk_encryption_ != nullptr) {
    delete full_disk_encryption_;
  }
  full_disk_encryption_ = nullptr;
  if (GetArenaForAllocation() == nullptr && secure_password_ != nullptr) {
    delete secure_password_;
  }
  secure_password_ = nullptr;
  if (GetArenaForAllocation() == nullptr && automatic_screen_lock_ != nullptr) {
    delete automatic_screen_lock_;
  }
  automatic_screen_lock_ = nullptr;
  if (GetArenaForAllocation() == nullptr && screen_lock_after_ != nullptr) {
    delete screen_lock_after_;
  }
  screen_lock_after_ = nullptr;
  if (GetArenaForAllocation() == nullptr && firewall_enabled_ != nullptr) {
    delete firewall_enabled_;
  }
  firewall_enabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && automatic_updates_ != nullptr) {
    delete automatic_updates_;
  }
  automatic_updates_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SecurityFeatures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue activation_lock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_lock(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue supervised = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_supervised(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue file_vault = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_vault(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue full_disk_encryption = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_disk_encryption(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue secure_password = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_secure_password(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue automatic_screen_lock = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_automatic_screen_lock(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value screen_lock_after = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_screen_lock_after(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue firewall_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_firewall_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue automatic_updates = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_automatic_updates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SecurityFeatures::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.SecurityFeatures)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue activation_lock = 1;
  if (this->_internal_has_activation_lock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::activation_lock(this),
        _Internal::activation_lock(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue supervised = 2;
  if (this->_internal_has_supervised()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::supervised(this),
        _Internal::supervised(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue file_vault = 3;
  if (this->_internal_has_file_vault()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::file_vault(this),
        _Internal::file_vault(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue full_disk_encryption = 4;
  if (this->_internal_has_full_disk_encryption()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::full_disk_encryption(this),
        _Internal::full_disk_encryption(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue secure_password = 5;
  if (this->_internal_has_secure_password()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::secure_password(this),
        _Internal::secure_password(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue automatic_screen_lock = 6;
  if (this->_internal_has_automatic_screen_lock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::automatic_screen_lock(this),
        _Internal::automatic_screen_lock(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value screen_lock_after = 7;
  if (this->_internal_has_screen_lock_after()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::screen_lock_after(this),
        _Internal::screen_lock_after(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue firewall_enabled = 8;
  if (this->_internal_has_firewall_enabled()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::firewall_enabled(this),
        _Internal::firewall_enabled(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue automatic_updates = 9;
  if (this->_internal_has_automatic_updates()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::automatic_updates(this),
        _Internal::automatic_updates(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.SecurityFeatures)
  return target;
}

size_t SecurityFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.SecurityFeatures)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue activation_lock = 1;
  if (this->_internal_has_activation_lock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activation_lock_);
  }

  // .google.protobuf.BoolValue supervised = 2;
  if (this->_internal_has_supervised()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *supervised_);
  }

  // .google.protobuf.BoolValue file_vault = 3;
  if (this->_internal_has_file_vault()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *file_vault_);
  }

  // .google.protobuf.BoolValue full_disk_encryption = 4;
  if (this->_internal_has_full_disk_encryption()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *full_disk_encryption_);
  }

  // .google.protobuf.BoolValue secure_password = 5;
  if (this->_internal_has_secure_password()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *secure_password_);
  }

  // .google.protobuf.BoolValue automatic_screen_lock = 6;
  if (this->_internal_has_automatic_screen_lock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *automatic_screen_lock_);
  }

  // .google.protobuf.Int32Value screen_lock_after = 7;
  if (this->_internal_has_screen_lock_after()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *screen_lock_after_);
  }

  // .google.protobuf.BoolValue firewall_enabled = 8;
  if (this->_internal_has_firewall_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *firewall_enabled_);
  }

  // .google.protobuf.BoolValue automatic_updates = 9;
  if (this->_internal_has_automatic_updates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *automatic_updates_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SecurityFeatures::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SecurityFeatures::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SecurityFeatures::GetClassData() const { return &_class_data_; }

void SecurityFeatures::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SecurityFeatures *>(to)->MergeFrom(
      static_cast<const SecurityFeatures &>(from));
}


void SecurityFeatures::MergeFrom(const SecurityFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.SecurityFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_activation_lock()) {
    _internal_mutable_activation_lock()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_activation_lock());
  }
  if (from._internal_has_supervised()) {
    _internal_mutable_supervised()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_supervised());
  }
  if (from._internal_has_file_vault()) {
    _internal_mutable_file_vault()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_file_vault());
  }
  if (from._internal_has_full_disk_encryption()) {
    _internal_mutable_full_disk_encryption()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_full_disk_encryption());
  }
  if (from._internal_has_secure_password()) {
    _internal_mutable_secure_password()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_secure_password());
  }
  if (from._internal_has_automatic_screen_lock()) {
    _internal_mutable_automatic_screen_lock()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_automatic_screen_lock());
  }
  if (from._internal_has_screen_lock_after()) {
    _internal_mutable_screen_lock_after()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(from._internal_screen_lock_after());
  }
  if (from._internal_has_firewall_enabled()) {
    _internal_mutable_firewall_enabled()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_firewall_enabled());
  }
  if (from._internal_has_automatic_updates()) {
    _internal_mutable_automatic_updates()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_automatic_updates());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SecurityFeatures::CopyFrom(const SecurityFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.SecurityFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityFeatures::IsInitialized() const {
  return true;
}

void SecurityFeatures::InternalSwap(SecurityFeatures* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SecurityFeatures, automatic_updates_)
      + sizeof(SecurityFeatures::automatic_updates_)
      - PROTOBUF_FIELD_OFFSET(SecurityFeatures, activation_lock_)>(
          reinterpret_cast<char*>(&activation_lock_),
          reinterpret_cast<char*>(&other->activation_lock_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityFeatures::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[10]);
}

// ===================================================================

class Network::_Internal {
 public:
};

Network::Network(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Network)
}
Network::Network(const Network& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  mac_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mac_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac_address().empty()) {
    mac_address_.Set(from._internal_mac_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Network)
}

inline void Network::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mac_address_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mac_address_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Network::~Network() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Network)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Network::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  type_.Destroy();
  mac_address_.Destroy();
}

void Network::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Network::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Network)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_.ClearToEmpty();
  mac_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Network::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Network.name"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Network.type"));
        } else
          goto handle_unusual;
        continue;
      // string mac_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mac_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Network.mac_address"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Network::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Network)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Network.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Network.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string mac_address = 3;
  if (!this->_internal_mac_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac_address().data(), static_cast<int>(this->_internal_mac_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Network.mac_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mac_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Network)
  return target;
}

size_t Network::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Network)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string mac_address = 3;
  if (!this->_internal_mac_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Network::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Network::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Network::GetClassData() const { return &_class_data_; }

void Network::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Network *>(to)->MergeFrom(
      static_cast<const Network &>(from));
}


void Network::MergeFrom(const Network& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Network)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_mac_address().empty()) {
    _internal_set_mac_address(from._internal_mac_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Network::CopyFrom(const Network& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network::IsInitialized() const {
  return true;
}

void Network::InternalSwap(Network* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mac_address_, lhs_arena,
      &other->mac_address_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Network::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[11]);
}

// ===================================================================

class OperatingSystem::_Internal {
 public:
};

OperatingSystem::OperatingSystem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.OperatingSystem)
}
OperatingSystem::OperatingSystem(const OperatingSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  major_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    major_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_major_version().empty()) {
    major_version_.Set(from._internal_major_version(), 
      GetArenaForAllocation());
  }
  full_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    full_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_full_version().empty()) {
    full_version_.Set(from._internal_full_version(), 
      GetArenaForAllocation());
  }
  os_ = from.os_;
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.OperatingSystem)
}

inline void OperatingSystem::SharedCtor() {
major_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  major_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
full_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  full_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
os_ = 0;
}

OperatingSystem::~OperatingSystem() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.OperatingSystem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperatingSystem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  major_version_.Destroy();
  full_version_.Destroy();
}

void OperatingSystem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OperatingSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.OperatingSystem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  major_version_.ClearToEmpty();
  full_version_.ClearToEmpty();
  os_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperatingSystem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .io.openisms.v1.OperatingSystem.OperatingSystems os = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_os(static_cast<::io::openisms::v1::OperatingSystem_OperatingSystems>(val));
        } else
          goto handle_unusual;
        continue;
      // string major_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_major_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.OperatingSystem.major_version"));
        } else
          goto handle_unusual;
        continue;
      // string full_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_full_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.OperatingSystem.full_version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperatingSystem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.OperatingSystem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.openisms.v1.OperatingSystem.OperatingSystems os = 1;
  if (this->_internal_os() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_os(), target);
  }

  // string major_version = 2;
  if (!this->_internal_major_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_major_version().data(), static_cast<int>(this->_internal_major_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.OperatingSystem.major_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_major_version(), target);
  }

  // string full_version = 3;
  if (!this->_internal_full_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_full_version().data(), static_cast<int>(this->_internal_full_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.OperatingSystem.full_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_full_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.OperatingSystem)
  return target;
}

size_t OperatingSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.OperatingSystem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string major_version = 2;
  if (!this->_internal_major_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_major_version());
  }

  // string full_version = 3;
  if (!this->_internal_full_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full_version());
  }

  // .io.openisms.v1.OperatingSystem.OperatingSystems os = 1;
  if (this->_internal_os() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_os());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperatingSystem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OperatingSystem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperatingSystem::GetClassData() const { return &_class_data_; }

void OperatingSystem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OperatingSystem *>(to)->MergeFrom(
      static_cast<const OperatingSystem &>(from));
}


void OperatingSystem::MergeFrom(const OperatingSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.OperatingSystem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_major_version().empty()) {
    _internal_set_major_version(from._internal_major_version());
  }
  if (!from._internal_full_version().empty()) {
    _internal_set_full_version(from._internal_full_version());
  }
  if (from._internal_os() != 0) {
    _internal_set_os(from._internal_os());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperatingSystem::CopyFrom(const OperatingSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.OperatingSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatingSystem::IsInitialized() const {
  return true;
}

void OperatingSystem::InternalSwap(OperatingSystem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &major_version_, lhs_arena,
      &other->major_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &full_version_, lhs_arena,
      &other->full_version_, rhs_arena
  );
  swap(os_, other->os_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperatingSystem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[12]);
}

// ===================================================================

class Application::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& signed_(const Application* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& system_app(const Application* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Application::_Internal::signed_(const Application* msg) {
  return *msg->signed__;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Application::_Internal::system_app(const Application* msg) {
  return *msg->system_app_;
}
void Application::clear_signed_() {
  if (GetArenaForAllocation() == nullptr && signed__ != nullptr) {
    delete signed__;
  }
  signed__ = nullptr;
}
void Application::clear_system_app() {
  if (GetArenaForAllocation() == nullptr && system_app_ != nullptr) {
    delete system_app_;
  }
  system_app_ = nullptr;
}
Application::Application(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Application)
}
Application::Application(const Application& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(from._internal_path(), 
      GetArenaForAllocation());
  }
  vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    vendor_.Set(from._internal_vendor(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  installation_source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    installation_source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_installation_source().empty()) {
    installation_source_.Set(from._internal_installation_source(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_signed_()) {
    signed__ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.signed__);
  } else {
    signed__ = nullptr;
  }
  if (from._internal_has_system_app()) {
    system_app_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.system_app_);
  } else {
    system_app_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Application)
}

inline void Application::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vendor_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vendor_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
installation_source_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  installation_source_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signed__) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&system_app_) -
    reinterpret_cast<char*>(&signed__)) + sizeof(system_app_));
}

Application::~Application() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Application)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Application::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  path_.Destroy();
  vendor_.Destroy();
  url_.Destroy();
  description_.Destroy();
  version_.Destroy();
  installation_source_.Destroy();
  if (this != internal_default_instance()) delete signed__;
  if (this != internal_default_instance()) delete system_app_;
}

void Application::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Application::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Application)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  path_.ClearToEmpty();
  vendor_.ClearToEmpty();
  url_.ClearToEmpty();
  description_.ClearToEmpty();
  version_.ClearToEmpty();
  installation_source_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && signed__ != nullptr) {
    delete signed__;
  }
  signed__ = nullptr;
  if (GetArenaForAllocation() == nullptr && system_app_ != nullptr) {
    delete system_app_;
  }
  system_app_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Application::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Application.name"));
        } else
          goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Application.path"));
        } else
          goto handle_unusual;
        continue;
      // string vendor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Application.vendor"));
        } else
          goto handle_unusual;
        continue;
      // string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Application.url"));
        } else
          goto handle_unusual;
        continue;
      // string description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Application.description"));
        } else
          goto handle_unusual;
        continue;
      // string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Application.version"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue signed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue system_app = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_app(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string installation_source = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_installation_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Application.installation_source"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Application::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Application)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Application.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Application.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string vendor = 3;
  if (!this->_internal_vendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Application.vendor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vendor(), target);
  }

  // string url = 4;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Application.url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_url(), target);
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Application.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Application.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  // .google.protobuf.BoolValue signed = 7;
  if (this->_internal_has_signed_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::signed_(this),
        _Internal::signed_(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue system_app = 8;
  if (this->_internal_has_system_app()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::system_app(this),
        _Internal::system_app(this).GetCachedSize(), target, stream);
  }

  // string installation_source = 9;
  if (!this->_internal_installation_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_installation_source().data(), static_cast<int>(this->_internal_installation_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Application.installation_source");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_installation_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Application)
  return target;
}

size_t Application::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Application)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string vendor = 3;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string url = 4;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string description = 5;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string installation_source = 9;
  if (!this->_internal_installation_source().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_installation_source());
  }

  // .google.protobuf.BoolValue signed = 7;
  if (this->_internal_has_signed_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signed__);
  }

  // .google.protobuf.BoolValue system_app = 8;
  if (this->_internal_has_system_app()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *system_app_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Application::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Application::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Application::GetClassData() const { return &_class_data_; }

void Application::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Application *>(to)->MergeFrom(
      static_cast<const Application &>(from));
}


void Application::MergeFrom(const Application& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Application)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (!from._internal_vendor().empty()) {
    _internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_installation_source().empty()) {
    _internal_set_installation_source(from._internal_installation_source());
  }
  if (from._internal_has_signed_()) {
    _internal_mutable_signed_()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_signed_());
  }
  if (from._internal_has_system_app()) {
    _internal_mutable_system_app()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_system_app());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Application::CopyFrom(const Application& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Application)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Application::IsInitialized() const {
  return true;
}

void Application::InternalSwap(Application* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vendor_, lhs_arena,
      &other->vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &installation_source_, lhs_arena,
      &other->installation_source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Application, system_app_)
      + sizeof(Application::system_app_)
      - PROTOBUF_FIELD_OFFSET(Application, signed__)>(
          reinterpret_cast<char*>(&signed__),
          reinterpret_cast<char*>(&other->signed__));
}

::PROTOBUF_NAMESPACE_ID::Metadata Application::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[13]);
}

// ===================================================================

class Profile::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& removal_allowed(const Profile* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Profile::_Internal::removal_allowed(const Profile* msg) {
  return *msg->removal_allowed_;
}
void Profile::clear_removal_allowed() {
  if (GetArenaForAllocation() == nullptr && removal_allowed_ != nullptr) {
    delete removal_allowed_;
  }
  removal_allowed_ = nullptr;
}
Profile::Profile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Profile)
}
Profile::Profile(const Profile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    identifier_.Set(from._internal_identifier(), 
      GetArenaForAllocation());
  }
  payload_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload_type().empty()) {
    payload_type_.Set(from._internal_payload_type(), 
      GetArenaForAllocation());
  }
  payload_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload_identifier().empty()) {
    payload_identifier_.Set(from._internal_payload_identifier(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_removal_allowed()) {
    removal_allowed_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.removal_allowed_);
  } else {
    removal_allowed_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Profile)
}

inline void Profile::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
identifier_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payload_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payload_identifier_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_identifier_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
removal_allowed_ = nullptr;
}

Profile::~Profile() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Profile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Profile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  identifier_.Destroy();
  payload_type_.Destroy();
  payload_identifier_.Destroy();
  if (this != internal_default_instance()) delete removal_allowed_;
}

void Profile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Profile::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Profile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  identifier_.ClearToEmpty();
  payload_type_.ClearToEmpty();
  payload_identifier_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && removal_allowed_ != nullptr) {
    delete removal_allowed_;
  }
  removal_allowed_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Profile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Profile.name"));
        } else
          goto handle_unusual;
        continue;
      // string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Profile.identifier"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue removal_allowed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_removal_allowed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string payload_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payload_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Profile.payload_type"));
        } else
          goto handle_unusual;
        continue;
      // string payload_identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_payload_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Profile.payload_identifier"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Profile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Profile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Profile.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string identifier = 2;
  if (!this->_internal_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Profile.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // .google.protobuf.BoolValue removal_allowed = 3;
  if (this->_internal_has_removal_allowed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::removal_allowed(this),
        _Internal::removal_allowed(this).GetCachedSize(), target, stream);
  }

  // string payload_type = 4;
  if (!this->_internal_payload_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload_type().data(), static_cast<int>(this->_internal_payload_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Profile.payload_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_payload_type(), target);
  }

  // string payload_identifier = 5;
  if (!this->_internal_payload_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload_identifier().data(), static_cast<int>(this->_internal_payload_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Profile.payload_identifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_payload_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Profile)
  return target;
}

size_t Profile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Profile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string identifier = 2;
  if (!this->_internal_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // string payload_type = 4;
  if (!this->_internal_payload_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload_type());
  }

  // string payload_identifier = 5;
  if (!this->_internal_payload_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload_identifier());
  }

  // .google.protobuf.BoolValue removal_allowed = 3;
  if (this->_internal_has_removal_allowed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *removal_allowed_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Profile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Profile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Profile::GetClassData() const { return &_class_data_; }

void Profile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Profile *>(to)->MergeFrom(
      static_cast<const Profile &>(from));
}


void Profile::MergeFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Profile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_identifier().empty()) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (!from._internal_payload_type().empty()) {
    _internal_set_payload_type(from._internal_payload_type());
  }
  if (!from._internal_payload_identifier().empty()) {
    _internal_set_payload_identifier(from._internal_payload_identifier());
  }
  if (from._internal_has_removal_allowed()) {
    _internal_mutable_removal_allowed()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_removal_allowed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Profile::CopyFrom(const Profile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Profile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Profile::IsInitialized() const {
  return true;
}

void Profile::InternalSwap(Profile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &payload_type_, lhs_arena,
      &other->payload_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &payload_identifier_, lhs_arena,
      &other->payload_identifier_, rhs_arena
  );
  swap(removal_allowed_, other->removal_allowed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Profile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[14]);
}

// ===================================================================

class Date::_Internal {
 public:
};

Date::Date(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Date)
}
Date::Date(const Date& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&day_) -
    reinterpret_cast<char*>(&year_)) + sizeof(day_));
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Date)
}

inline void Date::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&year_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&day_) -
    reinterpret_cast<char*>(&year_)) + sizeof(day_));
}

Date::~Date() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Date)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Date::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Date::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Date::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Date)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&day_) -
      reinterpret_cast<char*>(&year_)) + sizeof(day_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Date::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 month = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Date::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Date)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->_internal_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // int32 month = 2;
  if (this->_internal_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_month(), target);
  }

  // int32 day = 3;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Date)
  return target;
}

size_t Date::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Date)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 year = 1;
  if (this->_internal_year() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_year());
  }

  // int32 month = 2;
  if (this->_internal_month() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_month());
  }

  // int32 day = 3;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_day());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Date::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Date::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Date::GetClassData() const { return &_class_data_; }

void Date::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Date *>(to)->MergeFrom(
      static_cast<const Date &>(from));
}


void Date::MergeFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Date)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from._internal_month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from._internal_day() != 0) {
    _internal_set_day(from._internal_day());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Date::CopyFrom(const Date& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date::IsInitialized() const {
  return true;
}

void Date::InternalSwap(Date* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Date, day_)
      + sizeof(Date::day_)
      - PROTOBUF_FIELD_OFFSET(Date, year_)>(
          reinterpret_cast<char*>(&year_),
          reinterpret_cast<char*>(&other->year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Date::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[15]);
}

// ===================================================================

class Certification::_Internal {
 public:
};

Certification::Certification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Certification)
}
Certification::Certification(const Certification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Certification)
}

inline void Certification::SharedCtor() {
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Certification::~Certification() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Certification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Certification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.Destroy();
  url_.Destroy();
}

void Certification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Certification::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Certification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  type_.ClearToEmpty();
  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Certification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Certification.type"));
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Certification.url"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Certification.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Certification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Certification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Certification.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Certification.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // repeated string tags = 10;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Certification.tags");
    target = stream->WriteString(10, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Certification)
  return target;
}

size_t Certification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Certification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Certification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Certification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Certification::GetClassData() const { return &_class_data_; }

void Certification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Certification *>(to)->MergeFrom(
      static_cast<const Certification &>(from));
}


void Certification::MergeFrom(const Certification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Certification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Certification::CopyFrom(const Certification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Certification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Certification::IsInitialized() const {
  return true;
}

void Certification::InternalSwap(Certification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Certification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[16]);
}

// ===================================================================

class Company::_Internal {
 public:
  static const ::io::openisms::v1::Person& contact(const Company* msg);
};

const ::io::openisms::v1::Person&
Company::_Internal::contact(const Company* msg) {
  return *msg->contact_;
}
Company::Company(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  address_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Company)
}
Company::Company(const Company& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      address_(from.address_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  category_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    category_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_category().empty()) {
    category_.Set(from._internal_category(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_contact()) {
    contact_ = new ::io::openisms::v1::Person(*from.contact_);
  } else {
    contact_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Company)
}

inline void Company::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
category_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  category_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
contact_ = nullptr;
}

Company::~Company() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Company)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Company::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  url_.Destroy();
  category_.Destroy();
  if (this != internal_default_instance()) delete contact_;
}

void Company::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Company::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Company)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.Clear();
  name_.ClearToEmpty();
  url_.ClearToEmpty();
  category_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && contact_ != nullptr) {
    delete contact_;
  }
  contact_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Company::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Company.name"));
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Company.url"));
        } else
          goto handle_unusual;
        continue;
      // string category = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_category();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Company.category"));
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.Person contact = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_contact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_address();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Company.address"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Company::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Company)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Company.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Company.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // string category = 3;
  if (!this->_internal_category().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_category().data(), static_cast<int>(this->_internal_category().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Company.category");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_category(), target);
  }

  // .io.openisms.v1.Person contact = 4;
  if (this->_internal_has_contact()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::contact(this),
        _Internal::contact(this).GetCachedSize(), target, stream);
  }

  // repeated string address = 5;
  for (int i = 0, n = this->_internal_address_size(); i < n; i++) {
    const auto& s = this->_internal_address(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Company.address");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Company)
  return target;
}

size_t Company::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Company)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string address = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(address_.size());
  for (int i = 0, n = address_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      address_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string category = 3;
  if (!this->_internal_category().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category());
  }

  // .io.openisms.v1.Person contact = 4;
  if (this->_internal_has_contact()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contact_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Company::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Company::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Company::GetClassData() const { return &_class_data_; }

void Company::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Company *>(to)->MergeFrom(
      static_cast<const Company &>(from));
}


void Company::MergeFrom(const Company& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Company)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  address_.MergeFrom(from.address_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_category().empty()) {
    _internal_set_category(from._internal_category());
  }
  if (from._internal_has_contact()) {
    _internal_mutable_contact()->::io::openisms::v1::Person::MergeFrom(from._internal_contact());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Company::CopyFrom(const Company& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Company)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Company::IsInitialized() const {
  return true;
}

void Company::InternalSwap(Company* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  address_.InternalSwap(&other->address_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &category_, lhs_arena,
      &other->category_, rhs_arena
  );
  swap(contact_, other->contact_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Company::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[17]);
}

// ===================================================================

class Pentest::_Internal {
 public:
  static const ::io::openisms::v1::Date& begin(const Pentest* msg);
  static const ::io::openisms::v1::Date& end(const Pentest* msg);
  static const ::io::openisms::v1::Company& company(const Pentest* msg);
};

const ::io::openisms::v1::Date&
Pentest::_Internal::begin(const Pentest* msg) {
  return *msg->begin_;
}
const ::io::openisms::v1::Date&
Pentest::_Internal::end(const Pentest* msg) {
  return *msg->end_;
}
const ::io::openisms::v1::Company&
Pentest::_Internal::company(const Pentest* msg) {
  return *msg->company_;
}
Pentest::Pentest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  contacts_(arena),
  tags_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Pentest)
}
Pentest::Pentest(const Pentest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      contacts_(from.contacts_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  focus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    focus_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_focus().empty()) {
    focus_.Set(from._internal_focus(), 
      GetArenaForAllocation());
  }
  result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    result_.Set(from._internal_result(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_begin()) {
    begin_ = new ::io::openisms::v1::Date(*from.begin_);
  } else {
    begin_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::io::openisms::v1::Date(*from.end_);
  } else {
    end_ = nullptr;
  }
  if (from._internal_has_company()) {
    company_ = new ::io::openisms::v1::Company(*from.company_);
  } else {
    company_ = nullptr;
  }
  passed_ = from.passed_;
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Pentest)
}

inline void Pentest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
focus_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  focus_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
result_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  result_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&begin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&passed_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(passed_));
}

Pentest::~Pentest() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Pentest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pentest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  focus_.Destroy();
  result_.Destroy();
  url_.Destroy();
  if (this != internal_default_instance()) delete begin_;
  if (this != internal_default_instance()) delete end_;
  if (this != internal_default_instance()) delete company_;
}

void Pentest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pentest::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Pentest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contacts_.Clear();
  tags_.Clear();
  id_.ClearToEmpty();
  focus_.ClearToEmpty();
  result_.ClearToEmpty();
  url_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && begin_ != nullptr) {
    delete begin_;
  }
  begin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  if (GetArenaForAllocation() == nullptr && company_ != nullptr) {
    delete company_;
  }
  company_ = nullptr;
  passed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pentest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Pentest.id"));
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.Date begin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_begin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.Date end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.Company company = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_company(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string focus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_focus();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Pentest.focus"));
        } else
          goto handle_unusual;
        continue;
      // bool passed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          passed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Pentest.result"));
        } else
          goto handle_unusual;
        continue;
      // string url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Pentest.url"));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.openisms.v1.Person contacts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contacts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Pentest.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pentest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Pentest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Pentest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .io.openisms.v1.Date begin = 2;
  if (this->_internal_has_begin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::begin(this),
        _Internal::begin(this).GetCachedSize(), target, stream);
  }

  // .io.openisms.v1.Date end = 3;
  if (this->_internal_has_end()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  // .io.openisms.v1.Company company = 4;
  if (this->_internal_has_company()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::company(this),
        _Internal::company(this).GetCachedSize(), target, stream);
  }

  // string focus = 5;
  if (!this->_internal_focus().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_focus().data(), static_cast<int>(this->_internal_focus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Pentest.focus");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_focus(), target);
  }

  // bool passed = 6;
  if (this->_internal_passed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_passed(), target);
  }

  // string result = 7;
  if (!this->_internal_result().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Pentest.result");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_result(), target);
  }

  // string url = 8;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Pentest.url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_url(), target);
  }

  // repeated .io.openisms.v1.Person contacts = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contacts_size()); i < n; i++) {
    const auto& repfield = this->_internal_contacts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string tags = 10;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Pentest.tags");
    target = stream->WriteString(10, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Pentest)
  return target;
}

size_t Pentest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Pentest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.openisms.v1.Person contacts = 9;
  total_size += 1UL * this->_internal_contacts_size();
  for (const auto& msg : this->contacts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string tags = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string focus = 5;
  if (!this->_internal_focus().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_focus());
  }

  // string result = 7;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  // string url = 8;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .io.openisms.v1.Date begin = 2;
  if (this->_internal_has_begin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *begin_);
  }

  // .io.openisms.v1.Date end = 3;
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .io.openisms.v1.Company company = 4;
  if (this->_internal_has_company()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *company_);
  }

  // bool passed = 6;
  if (this->_internal_passed() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pentest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pentest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pentest::GetClassData() const { return &_class_data_; }

void Pentest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pentest *>(to)->MergeFrom(
      static_cast<const Pentest &>(from));
}


void Pentest::MergeFrom(const Pentest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Pentest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  contacts_.MergeFrom(from.contacts_);
  tags_.MergeFrom(from.tags_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_focus().empty()) {
    _internal_set_focus(from._internal_focus());
  }
  if (!from._internal_result().empty()) {
    _internal_set_result(from._internal_result());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (from._internal_has_begin()) {
    _internal_mutable_begin()->::io::openisms::v1::Date::MergeFrom(from._internal_begin());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::io::openisms::v1::Date::MergeFrom(from._internal_end());
  }
  if (from._internal_has_company()) {
    _internal_mutable_company()->::io::openisms::v1::Company::MergeFrom(from._internal_company());
  }
  if (from._internal_passed() != 0) {
    _internal_set_passed(from._internal_passed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pentest::CopyFrom(const Pentest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Pentest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pentest::IsInitialized() const {
  return true;
}

void Pentest::InternalSwap(Pentest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  contacts_.InternalSwap(&other->contacts_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &focus_, lhs_arena,
      &other->focus_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &result_, lhs_arena,
      &other->result_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pentest, passed_)
      + sizeof(Pentest::passed_)
      - PROTOBUF_FIELD_OFFSET(Pentest, begin_)>(
          reinterpret_cast<char*>(&begin_),
          reinterpret_cast<char*>(&other->begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pentest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[18]);
}

// ===================================================================

class Repository::_Internal {
 public:
};

Repository::Repository(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  members_(arena),
  security_attributes_(arena),
  tags_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Repository)
}
Repository::Repository(const Repository& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      members_(from.members_),
      security_attributes_(from.security_attributes_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  visibility_ = from.visibility_;
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Repository)
}

inline void Repository::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
visibility_ = 0;
}

Repository::~Repository() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Repository)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Repository::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  url_.Destroy();
  description_.Destroy();
}

void Repository::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Repository::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Repository)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  security_attributes_.Clear();
  tags_.Clear();
  name_.ClearToEmpty();
  url_.ClearToEmpty();
  description_.ClearToEmpty();
  visibility_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Repository::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Repository.name"));
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Repository.url"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Repository.description"));
        } else
          goto handle_unusual;
        continue;
      // .io.openisms.v1.Visibility visibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_visibility(static_cast<::io::openisms::v1::Visibility>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .io.openisms.v1.Person members = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string security_attributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_security_attributes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Repository.security_attributes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Repository.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Repository::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Repository)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Repository.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Repository.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Repository.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // .io.openisms.v1.Visibility visibility = 4;
  if (this->_internal_visibility() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_visibility(), target);
  }

  // repeated .io.openisms.v1.Person members = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string security_attributes = 6;
  for (int i = 0, n = this->_internal_security_attributes_size(); i < n; i++) {
    const auto& s = this->_internal_security_attributes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Repository.security_attributes");
    target = stream->WriteString(6, s, target);
  }

  // repeated string tags = 10;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Repository.tags");
    target = stream->WriteString(10, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Repository)
  return target;
}

size_t Repository::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Repository)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.openisms.v1.Person members = 5;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string security_attributes = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(security_attributes_.size());
  for (int i = 0, n = security_attributes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      security_attributes_.Get(i));
  }

  // repeated string tags = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .io.openisms.v1.Visibility visibility = 4;
  if (this->_internal_visibility() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_visibility());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Repository::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Repository::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Repository::GetClassData() const { return &_class_data_; }

void Repository::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Repository *>(to)->MergeFrom(
      static_cast<const Repository &>(from));
}


void Repository::MergeFrom(const Repository& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Repository)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  security_attributes_.MergeFrom(from.security_attributes_);
  tags_.MergeFrom(from.tags_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_visibility() != 0) {
    _internal_set_visibility(from._internal_visibility());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Repository::CopyFrom(const Repository& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Repository)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repository::IsInitialized() const {
  return true;
}

void Repository::InternalSwap(Repository* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
  security_attributes_.InternalSwap(&other->security_attributes_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  swap(visibility_, other->visibility_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Repository::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[19]);
}

// ===================================================================

class Statistics::_Internal {
 public:
};

Statistics::Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:io.openisms.v1.Statistics)
}
Statistics::Statistics(const Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    identifier_.Set(from._internal_identifier(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    comment_.Set(from._internal_comment(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:io.openisms.v1.Statistics)
}

inline void Statistics::SharedCtor() {
identifier_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  identifier_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
comment_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  comment_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = 0;
}

Statistics::~Statistics() {
  // @@protoc_insertion_point(destructor:io.openisms.v1.Statistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Statistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  identifier_.Destroy();
  name_.Destroy();
  comment_.Destroy();
}

void Statistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:io.openisms.v1.Statistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_.ClearToEmpty();
  name_.ClearToEmpty();
  comment_.ClearToEmpty();
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Statistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Statistics.identifier"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Statistics.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string comment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.openisms.v1.Statistics.comment"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Statistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.openisms.v1.Statistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1;
  if (!this->_internal_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Statistics.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Statistics.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 value = 3;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_value(), target);
  }

  // string comment = 4;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.openisms.v1.Statistics.comment");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.openisms.v1.Statistics)
  return target;
}

size_t Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.openisms.v1.Statistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 1;
  if (!this->_internal_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string comment = 4;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // int32 value = 3;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Statistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Statistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Statistics::GetClassData() const { return &_class_data_; }

void Statistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Statistics *>(to)->MergeFrom(
      static_cast<const Statistics &>(from));
}


void Statistics::MergeFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.openisms.v1.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier().empty()) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_comment().empty()) {
    _internal_set_comment(from._internal_comment());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Statistics::CopyFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.openisms.v1.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistics::IsInitialized() const {
  return true;
}

void Statistics::InternalSwap(Statistics* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &identifier_, lhs_arena,
      &other->identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &comment_, lhs_arena,
      &other->comment_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_io_2fopenisms_2fapi_2eproto_getter, &descriptor_table_io_2fopenisms_2fapi_2eproto_once,
      file_level_metadata_io_2fopenisms_2fapi_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace openisms
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Event*
Arena::CreateMaybeMessage< ::io::openisms::v1::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Meta*
Arena::CreateMaybeMessage< ::io::openisms::v1::Meta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Meta >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::SourceSystem*
Arena::CreateMaybeMessage< ::io::openisms::v1::SourceSystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::SourceSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::User*
Arena::CreateMaybeMessage< ::io::openisms::v1::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::User >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Person*
Arena::CreateMaybeMessage< ::io::openisms::v1::Person >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Person >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Name*
Arena::CreateMaybeMessage< ::io::openisms::v1::Name >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Name >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::UrlWithEtag*
Arena::CreateMaybeMessage< ::io::openisms::v1::UrlWithEtag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::UrlWithEtag >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Employment*
Arena::CreateMaybeMessage< ::io::openisms::v1::Employment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Employment >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::ConnectedAccount*
Arena::CreateMaybeMessage< ::io::openisms::v1::ConnectedAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::ConnectedAccount >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::PhysicalObject*
Arena::CreateMaybeMessage< ::io::openisms::v1::PhysicalObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::PhysicalObject >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::SecurityFeatures*
Arena::CreateMaybeMessage< ::io::openisms::v1::SecurityFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::SecurityFeatures >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Network*
Arena::CreateMaybeMessage< ::io::openisms::v1::Network >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Network >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::OperatingSystem*
Arena::CreateMaybeMessage< ::io::openisms::v1::OperatingSystem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::OperatingSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Application*
Arena::CreateMaybeMessage< ::io::openisms::v1::Application >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Application >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Profile*
Arena::CreateMaybeMessage< ::io::openisms::v1::Profile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Profile >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Date*
Arena::CreateMaybeMessage< ::io::openisms::v1::Date >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Date >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Certification*
Arena::CreateMaybeMessage< ::io::openisms::v1::Certification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Certification >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Company*
Arena::CreateMaybeMessage< ::io::openisms::v1::Company >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Company >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Pentest*
Arena::CreateMaybeMessage< ::io::openisms::v1::Pentest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Pentest >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Repository*
Arena::CreateMaybeMessage< ::io::openisms::v1::Repository >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Repository >(arena);
}
template<> PROTOBUF_NOINLINE ::io::openisms::v1::Statistics*
Arena::CreateMaybeMessage< ::io::openisms::v1::Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::openisms::v1::Statistics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
